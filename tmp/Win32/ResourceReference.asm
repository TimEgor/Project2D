; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceReference.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__8B404B8B_vcruntime_new@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__4C8DB69C_cstddef DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__E9466C31_cstdlib DB 01H
__77E6CA79_type_traits DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__A0B61CF9_time@h DB 01H
__CBA6A69C_xthreads@h DB 01H
__CF4A8F35_atomic DB 01H
__FAF99A17_ResourceHandler@h DB 01H
__9CA0F463_ResourceReference@h DB 01H
__876F75EA_ResourceReference@cpp DB 01H
__8C597A7F_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	??E?$_Atomic_integral@I$03@std@@QAEIXZ		; std::_Atomic_integral<unsigned int,4>::operator++
PUBLIC	??F?$_Atomic_integral@I$03@std@@QAEIXZ		; std::_Atomic_integral<unsigned int,4>::operator--
PUBLIC	?incrementRefCounter@ResourceHandler@@QAEXXZ	; ResourceHandler::incrementRefCounter
PUBLIC	?decrementRefCounter@ResourceHandler@@QAEXXZ	; ResourceHandler::decrementRefCounter
PUBLIC	??0ResourceReference@@QAE@AAVResourceHandler@@@Z ; ResourceReference::ResourceReference
PUBLIC	??0ResourceReference@@QAE@ABV0@@Z		; ResourceReference::ResourceReference
PUBLIC	??1ResourceReference@@QAE@XZ			; ResourceReference::~ResourceReference
PUBLIC	??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
PUBLIC	__JustMyCode_Default
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ResourceReference@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z PROC ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >, COMDAT

; 94   : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8C597A7F_xatomic@h
	call	@__CheckForDebuggerJustMyCode@4

; 95   :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 96   :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 97   :     return &reinterpret_cast<volatile _Integral&>(_Source);

	mov	eax, DWORD PTR __Source$[ebp]

; 98   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ENDP ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceReference.cpp
;	COMDAT ??1ResourceReference@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1ResourceReference@@QAE@XZ PROC			; ResourceReference::~ResourceReference, COMDAT
; _this$ = ecx

; 11   : ResourceReference::~ResourceReference() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1ResourceReference@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __876F75EA_ResourceReference@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 12   : 	handler.decrementRefCounter();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?decrementRefCounter@ResourceHandler@@QAEXXZ ; ResourceHandler::decrementRefCounter

; 13   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ResourceReference@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1ResourceReference@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1ResourceReference@@QAE@XZ ENDP			; ResourceReference::~ResourceReference
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceReference.cpp
;	COMDAT ??0ResourceReference@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_reference$ = 8						; size = 4
??0ResourceReference@@QAE@ABV0@@Z PROC			; ResourceReference::ResourceReference, COMDAT
; _this$ = ecx

; 7    : ResourceReference::ResourceReference(const ResourceReference& reference) : handler(reference.handler) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __876F75EA_ResourceReference@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _reference$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 8    : 	handler.incrementRefCounter();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?incrementRefCounter@ResourceHandler@@QAEXXZ ; ResourceHandler::incrementRefCounter

; 9    : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0ResourceReference@@QAE@ABV0@@Z ENDP			; ResourceReference::ResourceReference
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceReference.cpp
;	COMDAT ??0ResourceReference@@QAE@AAVResourceHandler@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_handler$ = 8						; size = 4
??0ResourceReference@@QAE@AAVResourceHandler@@@Z PROC	; ResourceReference::ResourceReference, COMDAT
; _this$ = ecx

; 3    : ResourceReference::ResourceReference(ResourceHandler& handler) : handler(handler) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __876F75EA_ResourceReference@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _handler$[ebp]
	mov	DWORD PTR [eax], ecx

; 4    : 	handler.incrementRefCounter();

	mov	ecx, DWORD PTR _handler$[ebp]
	call	?incrementRefCounter@ResourceHandler@@QAEXXZ ; ResourceHandler::incrementRefCounter

; 5    : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0ResourceReference@@QAE@AAVResourceHandler@@@Z ENDP	; ResourceReference::ResourceReference
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceHandler.h
;	COMDAT ?decrementRefCounter@ResourceHandler@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?decrementRefCounter@ResourceHandler@@QAEXXZ PROC	; ResourceHandler::decrementRefCounter, COMDAT
; _this$ = ecx

; 25   : 	void decrementRefCounter() { --refCounter; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __FAF99A17_ResourceHandler@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??F?$_Atomic_integral@I$03@std@@QAEIXZ	; std::_Atomic_integral<unsigned int,4>::operator--
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?decrementRefCounter@ResourceHandler@@QAEXXZ ENDP	; ResourceHandler::decrementRefCounter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceHandler.h
;	COMDAT ?incrementRefCounter@ResourceHandler@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?incrementRefCounter@ResourceHandler@@QAEXXZ PROC	; ResourceHandler::incrementRefCounter, COMDAT
; _this$ = ecx

; 24   : 	void incrementRefCounter() { ++refCounter; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __FAF99A17_ResourceHandler@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??E?$_Atomic_integral@I$03@std@@QAEIXZ	; std::_Atomic_integral<unsigned int,4>::operator++
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?incrementRefCounter@ResourceHandler@@QAEXXZ ENDP	; ResourceHandler::incrementRefCounter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\atomic
;	COMDAT ??F?$_Atomic_integral@I$03@std@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??F?$_Atomic_integral@I$03@std@@QAEIXZ PROC		; std::_Atomic_integral<unsigned int,4>::operator--, COMDAT
; _this$ = ecx

; 1502 :     _TVal operator--() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __CF4A8F35_atomic
	call	@__CheckForDebuggerJustMyCode@4

; 1503 :         return static_cast<_TVal>(_InterlockedDecrement(_Atomic_address_as<long>(this->_Storage)));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
	add	esp, 4
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	mov	eax, ecx

; 1504 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Atomic_integral@I$03@std@@QAEIXZ ENDP		; std::_Atomic_integral<unsigned int,4>::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\atomic
;	COMDAT ??E?$_Atomic_integral@I$03@std@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_Atomic_integral@I$03@std@@QAEIXZ PROC		; std::_Atomic_integral<unsigned int,4>::operator++, COMDAT
; _this$ = ecx

; 1491 :     _TVal operator++() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __CF4A8F35_atomic
	call	@__CheckForDebuggerJustMyCode@4

; 1492 :         return static_cast<_TVal>(_InterlockedIncrement(_Atomic_address_as<long>(this->_Storage)));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
	add	esp, 4
	mov	ecx, 1
	lock	 xadd	 DWORD PTR [eax], ecx
	inc	ecx
	mov	eax, ecx

; 1493 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Atomic_integral@I$03@std@@QAEIXZ ENDP		; std::_Atomic_integral<unsigned int,4>::operator++
_TEXT	ENDS
END
