; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__BE586046_PoolAllocator@h DB 01H
__B2D2BA86_ctype@h DB 01H
__79C7FC57_basetsd@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__D545DD43_guiddef@h DB 01H
__D5DDFBF3_winnt@h DB 01H
__439612F0_processthreadsapi@h DB 01H
__5733279A_memoryapi@h DB 01H
__D4435474_winerror@h DB 01H
__B3ED30D4_winbase@h DB 01H
__DB057BA3_winuser@h DB 01H
__A7113148_winioctl@h DB 01H
__B49664B7_stdlib@h DB 01H
__EC5BC72C_propidl@h DB 01H
__6DA674A0_oleauto@h DB 01H
__A118E6DC_stralign@h DB 01H
__1E01F8EA_Heap@h DB 01H
__8B404B8B_vcruntime_new@h DB 01H
__4C8DB69C_cstddef DB 01H
__741AE07E_corecrt_math@h DB 01H
__E9466C31_cstdlib DB 01H
__77E6CA79_type_traits DB 01H
__20BB4341_malloc@h DB 01H
__604808BE_vcruntime_exception@h DB 01H
__8655F6A9_exception DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__EC89C42C_vcruntime_typeinfo@h DB 01H
__AE3815F6_typeinfo DB 01H
__A47FD3F7_limits DB 01H
__DEE7E6EF_xutility DB 01H
__B4DE8A79_xmemory DB 01H
__18D1DF79_memory DB 01H
__98FED0A8_PoolAllocator@cpp DB 01H
msvcjmc	ENDS
PUBLIC	??0PoolAllocator@@QAE@XZ			; PoolAllocator::PoolAllocator
PUBLIC	??0PoolAllocator@@QAE@$$QAV0@@Z			; PoolAllocator::PoolAllocator
PUBLIC	??1PoolAllocator@@UAE@XZ			; PoolAllocator::~PoolAllocator
PUBLIC	??4PoolAllocator@@QAEAAV0@$$QAV0@@Z		; PoolAllocator::operator=
PUBLIC	?init@PoolAllocator@@UAE_NPAVHeap@@II@Z		; PoolAllocator::init
PUBLIC	?release@PoolAllocator@@UAEXXZ			; PoolAllocator::release
PUBLIC	?allocate@PoolAllocator@@UAEPAXXZ		; PoolAllocator::allocate
PUBLIC	?deallocate@PoolAllocator@@UAEXPAX@Z		; PoolAllocator::deallocate
PUBLIC	?clear@PoolAllocator@@UAEXXZ			; PoolAllocator::clear
PUBLIC	?getHeap@PoolAllocator@@UAEPAVHeap@@XZ		; PoolAllocator::getHeap
PUBLIC	?size@PoolAllocator@@UBEIXZ			; PoolAllocator::size
PUBLIC	?getBucketSize@PoolAllocator@@UBEIXZ		; PoolAllocator::getBucketSize
PUBLIC	?getBucketsNum@PoolAllocator@@UBEIXZ		; PoolAllocator::getBucketsNum
PUBLIC	?isFull@PoolAllocator@@UBE_NXZ			; PoolAllocator::isFull
PUBLIC	?isInit@PoolAllocator@@UBE_NXZ			; PoolAllocator::isInit
PUBLIC	??_GPoolAllocator@@UAEPAXI@Z			; PoolAllocator::`scalar deleting destructor'
PUBLIC	__JustMyCode_Default
PUBLIC	??_7PoolAllocator@@6B@				; PoolAllocator::`vftable'
PUBLIC	?__LINE__Var@?0??init@PoolAllocator@@UAE_NPAVHeap@@II@Z@4JA ; `PoolAllocator::init'::`1'::__LINE__Var
PUBLIC	??_C@_1OI@IAPPMEEC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAt?$AAi?$AAm?$AA2?$AA3?$AA?2@ ; `string'
PUBLIC	??_C@_1EK@EJAJGGNI@?$AA_?$AAb?$AAu?$AAc?$AAk?$AAe?$AAt?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AAs@ ; `string'
PUBLIC	??_R4PoolAllocator@@6B@				; PoolAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPoolAllocator@@@8			; PoolAllocator `RTTI Type Descriptor'
PUBLIC	??_R3PoolAllocator@@8				; PoolAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PoolAllocator@@8				; PoolAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PoolAllocator@@8			; PoolAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_EPoolAllocator@@UAEPAXI@Z:PROC		; PoolAllocator::`vector deleting destructor'
EXTRN	?allocate@Heap@@QAEPAXI@Z:PROC			; Heap::allocate
EXTRN	?deallocate@Heap@@QAEXPAX@Z:PROC		; Heap::deallocate
EXTRN	__imp___wassert:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@PoolAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PoolAllocator@@8 DD FLAT:??_R0?AVPoolAllocator@@@8 ; PoolAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PoolAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2PoolAllocator@@8
rdata$r	SEGMENT
??_R2PoolAllocator@@8 DD FLAT:??_R1A@?0A@EA@PoolAllocator@@8 ; PoolAllocator::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PoolAllocator@@8
rdata$r	SEGMENT
??_R3PoolAllocator@@8 DD 00H				; PoolAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PoolAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPoolAllocator@@@8
data$rs	SEGMENT
??_R0?AVPoolAllocator@@@8 DD FLAT:??_7type_info@@6B@	; PoolAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPoolAllocator@@', 00H
data$rs	ENDS
;	COMDAT ??_R4PoolAllocator@@6B@
rdata$r	SEGMENT
??_R4PoolAllocator@@6B@ DD 00H				; PoolAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPoolAllocator@@@8
	DD	FLAT:??_R3PoolAllocator@@8
rdata$r	ENDS
;	COMDAT ??_C@_1EK@EJAJGGNI@?$AA_?$AAb?$AAu?$AAc?$AAk?$AAe?$AAt?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AAs@
CONST	SEGMENT
??_C@_1EK@EJAJGGNI@?$AA_?$AAb?$AAu?$AAc?$AAk?$AAe?$AAt?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AAs@ DB '_'
	DB	00H, 'b', 00H, 'u', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 't', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H
	DB	'(', 00H, 'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'B', 00H, 'u'
	DB	00H, 'c', 00H, 'k', 00H, 'e', 00H, 't', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1OI@IAPPMEEC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAt?$AAi?$AAm?$AA2?$AA3?$AA?2@
CONST	SEGMENT
??_C@_1OI@IAPPMEEC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAt?$AAi?$AAm?$AA2?$AA3?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 't', 00H, 'i', 00H, 'm', 00H, '2', 00H, '3'
	DB	00H, '\', 00H, 'D', 00H, 'o', 00H, 'c', 00H, 'u', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, 'V', 00H, 'i'
	DB	00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'S', 00H
	DB	't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, '2'
	DB	00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'P', 00H, 'r', 00H
	DB	'o', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '2', 00H, 'D', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o'
	DB	00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '2', 00H, 'D', 00H
	DB	'\', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y'
	DB	00H, 'M', 00H, 'a', 00H, 'n', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'r', 00H, '\', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, '\', 00H
	DB	'P', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 'A', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??init@PoolAllocator@@UAE_NPAVHeap@@II@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??init@PoolAllocator@@UAE_NPAVHeap@@II@Z@4JA DD 031H ; `PoolAllocator::init'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7PoolAllocator@@6B@
CONST	SEGMENT
??_7PoolAllocator@@6B@ DD FLAT:??_R4PoolAllocator@@6B@	; PoolAllocator::`vftable'
	DD	FLAT:??_EPoolAllocator@@UAEPAXI@Z
	DD	FLAT:?init@PoolAllocator@@UAE_NPAVHeap@@II@Z
	DD	FLAT:?release@PoolAllocator@@UAEXXZ
	DD	FLAT:?allocate@PoolAllocator@@UAEPAXXZ
	DD	FLAT:?deallocate@PoolAllocator@@UAEXPAX@Z
	DD	FLAT:?clear@PoolAllocator@@UAEXXZ
	DD	FLAT:?getHeap@PoolAllocator@@UAEPAVHeap@@XZ
	DD	FLAT:?size@PoolAllocator@@UBEIXZ
	DD	FLAT:?getBucketSize@PoolAllocator@@UBEIXZ
	DD	FLAT:?getBucketsNum@PoolAllocator@@UBEIXZ
	DD	FLAT:?isFull@PoolAllocator@@UBE_NXZ
	DD	FLAT:?isInit@PoolAllocator@@UBE_NXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1PoolAllocator@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GPoolAllocator@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GPoolAllocator@@UAEPAXI@Z PROC			; PoolAllocator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PoolAllocator@@UAE@XZ		; PoolAllocator::~PoolAllocator
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPoolAllocator@@UAEPAXI@Z ENDP			; PoolAllocator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?isInit@PoolAllocator@@UBE_NXZ
_TEXT	SEGMENT
tv66 = -205						; size = 1
_this$ = -8						; size = 4
?isInit@PoolAllocator@@UBE_NXZ PROC			; PoolAllocator::isInit, COMDAT
; _this$ = ecx

; 47   : 	virtual bool isInit() const { return buckets; }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@isInit
	mov	BYTE PTR tv66[ebp], 1
	jmp	SHORT $LN4@isInit
$LN3@isInit:
	mov	BYTE PTR tv66[ebp], 0
$LN4@isInit:
	mov	al, BYTE PTR tv66[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isInit@PoolAllocator@@UBE_NXZ ENDP			; PoolAllocator::isInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?isFull@PoolAllocator@@UBE_NXZ
_TEXT	SEGMENT
tv67 = -208						; size = 4
_this$ = -8						; size = 4
?isFull@PoolAllocator@@UBE_NXZ PROC			; PoolAllocator::isFull, COMDAT
; _this$ = ecx

; 46   : 	virtual bool isFull() const { return usingBucketsNum == bucketsNum; }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+24]
	jne	SHORT $LN3@isFull
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@isFull
$LN3@isFull:
	mov	DWORD PTR tv67[ebp], 0
$LN4@isFull:
	mov	al, BYTE PTR tv67[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isFull@PoolAllocator@@UBE_NXZ ENDP			; PoolAllocator::isFull
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?getBucketsNum@PoolAllocator@@UBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getBucketsNum@PoolAllocator@@UBEIXZ PROC		; PoolAllocator::getBucketsNum, COMDAT
; _this$ = ecx

; 44   : 	virtual size_t getBucketsNum() const { return bucketsNum; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getBucketsNum@PoolAllocator@@UBEIXZ ENDP		; PoolAllocator::getBucketsNum
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?getBucketSize@PoolAllocator@@UBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getBucketSize@PoolAllocator@@UBEIXZ PROC		; PoolAllocator::getBucketSize, COMDAT
; _this$ = ecx

; 43   : 	virtual size_t getBucketSize() const { return bucketSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getBucketSize@PoolAllocator@@UBEIXZ ENDP		; PoolAllocator::getBucketSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?size@PoolAllocator@@UBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@PoolAllocator@@UBEIXZ PROC			; PoolAllocator::size, COMDAT
; _this$ = ecx

; 41   : 	virtual size_t size() const { return usingBucketsNum; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@PoolAllocator@@UBEIXZ ENDP			; PoolAllocator::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?getHeap@PoolAllocator@@UAEPAVHeap@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getHeap@PoolAllocator@@UAEPAVHeap@@XZ PROC		; PoolAllocator::getHeap, COMDAT
; _this$ = ecx

; 39   : 	virtual Heap* getHeap() { return heap; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getHeap@PoolAllocator@@UAEPAVHeap@@XZ ENDP		; PoolAllocator::getHeap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.cpp
;	COMDAT ?clear@PoolAllocator@@UAEXXZ
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_iterSectorInfo$ = -20					; size = 4
_this$ = -8						; size = 4
?clear@PoolAllocator@@UAEXXZ PROC			; PoolAllocator::clear, COMDAT
; _this$ = ecx

; 104  : void PoolAllocator::clear() {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __98FED0A8_PoolAllocator@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 105  :     firstFreeBucket = (FreeBucketInfo*)buckets;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 106  : 
; 107  :     FreeBucketInfo* iterSectorInfo = firstFreeBucket;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _iterSectorInfo$[ebp], ecx

; 108  :     for (size_t i = 0; i < bucketsNum; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@clear
$LN2@clear:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN3@clear

; 109  :         iterSectorInfo->nextFree = (FreeBucketInfo*)((uint8_t*)firstFreeBucket + (bucketSize * i));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _iterSectorInfo$[ebp]
	mov	DWORD PTR [eax], ecx

; 110  :         iterSectorInfo = iterSectorInfo->nextFree;

	mov	eax, DWORD PTR _iterSectorInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iterSectorInfo$[ebp], ecx

; 111  :     }

	jmp	SHORT $LN2@clear
$LN3@clear:

; 112  :     iterSectorInfo->nextFree = nullptr;

	mov	eax, DWORD PTR _iterSectorInfo$[ebp]
	mov	DWORD PTR [eax], 0

; 113  : 
; 114  :     usingBucketsNum = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@PoolAllocator@@UAEXXZ ENDP			; PoolAllocator::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.cpp
;	COMDAT ?deallocate@PoolAllocator@@UAEXPAX@Z
_TEXT	SEGMENT
_nextFreeBucket$ = -20					; size = 4
_this$ = -8						; size = 4
_bucket$ = 8						; size = 4
?deallocate@PoolAllocator@@UAEXPAX@Z PROC		; PoolAllocator::deallocate, COMDAT
; _this$ = ecx

; 95   : void PoolAllocator::deallocate(void* bucket) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __98FED0A8_PoolAllocator@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 96   :     FreeBucketInfo* nextFreeBucket = (FreeBucketInfo*)bucket;

	mov	eax, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR _nextFreeBucket$[ebp], eax

; 97   :     nextFreeBucket->nextFree = firstFreeBucket;

	mov	eax, DWORD PTR _nextFreeBucket$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx

; 98   : 
; 99   :     firstFreeBucket = nextFreeBucket;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nextFreeBucket$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 100  : 
; 101  :     --usingBucketsNum;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 102  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@PoolAllocator@@UAEXPAX@Z ENDP		; PoolAllocator::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.cpp
;	COMDAT ?allocate@PoolAllocator@@UAEPAXXZ
_TEXT	SEGMENT
_requiringBucket$ = -20					; size = 4
_this$ = -8						; size = 4
?allocate@PoolAllocator@@UAEPAXXZ PROC			; PoolAllocator::allocate, COMDAT
; _this$ = ecx

; 82   : void* PoolAllocator::allocate() {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __98FED0A8_PoolAllocator@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 83   :     void* requiringBucket = nullptr;

	mov	DWORD PTR _requiringBucket$[ebp], 0

; 84   : 
; 85   :     if (firstFreeBucket) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@allocate

; 86   :         requiringBucket = firstFreeBucket;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _requiringBucket$[ebp], ecx

; 87   :         firstFreeBucket = firstFreeBucket->nextFree;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+12], eax

; 88   : 
; 89   :         ++usingBucketsNum;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN2@allocate:

; 90   :     }
; 91   : 
; 92   :     return requiringBucket;

	mov	eax, DWORD PTR _requiringBucket$[ebp]

; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?allocate@PoolAllocator@@UAEPAXXZ ENDP			; PoolAllocator::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.cpp
;	COMDAT ?release@PoolAllocator@@UAEXXZ
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
?release@PoolAllocator@@UAEXXZ PROC			; PoolAllocator::release, COMDAT
; _this$ = ecx

; 68   : void PoolAllocator::release() {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __98FED0A8_PoolAllocator@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 69   :     if (buckets) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@release

; 70   :         heap->deallocate(buckets);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR tv71[ebp]
	call	?deallocate@Heap@@QAEXPAX@Z		; Heap::deallocate

; 71   :         buckets = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN2@release:

; 72   :     }
; 73   : 
; 74   :     heap = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 75   :     firstFreeBucket = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 76   : 
; 77   :     usingBucketsNum = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 78   :     bucketSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 79   :     bucketsNum = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?release@PoolAllocator@@UAEXXZ ENDP			; PoolAllocator::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.cpp
;	COMDAT ?init@PoolAllocator@@UAE_NPAVHeap@@II@Z
_TEXT	SEGMENT
_requiredSize$ = -20					; size = 4
_this$ = -8						; size = 4
__heap$ = 8						; size = 4
__bucketSize$ = 12					; size = 4
__bucketsNum$ = 16					; size = 4
?init@PoolAllocator@@UAE_NPAVHeap@@II@Z PROC		; PoolAllocator::init, COMDAT
; _this$ = ecx

; 49   : bool PoolAllocator::init(Heap* _heap, size_t _bucketSize, size_t _bucketsNum) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __98FED0A8_PoolAllocator@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 50   :     assert(_bucketSize > sizeof(FreeBucketInfo));

	cmp	DWORD PTR __bucketSize$[ebp], 4
	ja	SHORT $LN4@init
	mov	eax, DWORD PTR ?__LINE__Var@?0??init@PoolAllocator@@UAE_NPAVHeap@@II@Z@4JA
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1OI@IAPPMEEC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAt?$AAi?$AAm?$AA2?$AA3?$AA?2@
	push	OFFSET ??_C@_1EK@EJAJGGNI@?$AA_?$AAb?$AAu?$AAc?$AAk?$AAe?$AAt?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AAs@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@init:

; 51   : 
; 52   :     size_t requiredSize = _bucketSize * _bucketsNum;

	mov	eax, DWORD PTR __bucketSize$[ebp]
	imul	eax, DWORD PTR __bucketsNum$[ebp]
	mov	DWORD PTR _requiredSize$[ebp], eax

; 53   :     buckets = _heap->allocate(requiredSize);

	mov	eax, DWORD PTR _requiredSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __heap$[ebp]
	call	?allocate@Heap@@QAEPAXI@Z		; Heap::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 54   :     if (!buckets) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@init

; 55   :         return false;

	xor	al, al
	jmp	SHORT $LN1@init
$LN2@init:

; 56   :     }
; 57   : 
; 58   :     heap = _heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __heap$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 59   : 
; 60   :     bucketSize = _bucketSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __bucketSize$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 61   :     bucketsNum = _bucketsNum;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __bucketsNum$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 62   : 
; 63   :     clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 64   : 
; 65   :     return true;

	mov	al, 1
$LN1@init:

; 66   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init@PoolAllocator@@UAE_NPAVHeap@@II@Z ENDP		; PoolAllocator::init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.cpp
;	COMDAT ??4PoolAllocator@@QAEAAV0@$$QAV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_allocator$ = 8						; size = 4
??4PoolAllocator@@QAEAAV0@$$QAV0@@Z PROC		; PoolAllocator::operator=, COMDAT
; _this$ = ecx

; 29   : PoolAllocator& PoolAllocator::operator=(PoolAllocator&& allocator) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __98FED0A8_PoolAllocator@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 30   :     release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 31   : 
; 32   :     heap = allocator.heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 33   :     buckets = allocator.buckets;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 34   :     firstFreeBucket = allocator.firstFreeBucket;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 35   :     usingBucketsNum = allocator.usingBucketsNum;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 36   :     bucketSize = allocator.bucketSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 37   :     bucketsNum = allocator.bucketsNum;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 38   : 
; 39   :     allocator.heap = nullptr;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+4], 0

; 40   :     allocator.buckets = nullptr;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+8], 0

; 41   :     allocator.firstFreeBucket = nullptr;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+12], 0

; 42   :     allocator.usingBucketsNum = 0;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+16], 0

; 43   :     allocator.bucketSize = 0;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+20], 0

; 44   :     allocator.bucketsNum = 0;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+24], 0

; 45   : 
; 46   :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 47   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4PoolAllocator@@QAEAAV0@$$QAV0@@Z ENDP		; PoolAllocator::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ??1PoolAllocator@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1PoolAllocator@@UAE@XZ PROC				; PoolAllocator::~PoolAllocator, COMDAT
; _this$ = ecx

; 26   : 	virtual ~PoolAllocator() { PoolAllocator::release(); }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1PoolAllocator@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PoolAllocator@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?release@PoolAllocator@@UAEXXZ		; PoolAllocator::release
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1PoolAllocator@@UAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1PoolAllocator@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1PoolAllocator@@UAE@XZ ENDP				; PoolAllocator::~PoolAllocator
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.cpp
;	COMDAT ??0PoolAllocator@@QAE@$$QAV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_allocator$ = 8						; size = 4
??0PoolAllocator@@QAE@$$QAV0@@Z PROC			; PoolAllocator::PoolAllocator, COMDAT
; _this$ = ecx

; 13   : PoolAllocator::PoolAllocator(PoolAllocator&& allocator) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __98FED0A8_PoolAllocator@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PoolAllocator@@6B@

; 14   :     heap = allocator.heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 15   :     buckets = allocator.buckets;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 16   :     firstFreeBucket = allocator.firstFreeBucket;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 17   :     usingBucketsNum = allocator.usingBucketsNum;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 18   :     bucketSize = allocator.bucketSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 19   :     bucketsNum = allocator.bucketsNum;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _allocator$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 20   : 
; 21   :     allocator.heap = nullptr;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+4], 0

; 22   :     allocator.buckets = nullptr;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+8], 0

; 23   :     allocator.firstFreeBucket = nullptr;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+12], 0

; 24   :     allocator.usingBucketsNum = 0;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+16], 0

; 25   :     allocator.bucketSize = 0;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+20], 0

; 26   :     allocator.bucketsNum = 0;

	mov	eax, DWORD PTR _allocator$[ebp]
	mov	DWORD PTR [eax+24], 0

; 27   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0PoolAllocator@@QAE@$$QAV0@@Z ENDP			; PoolAllocator::PoolAllocator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.cpp
;	COMDAT ??0PoolAllocator@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0PoolAllocator@@QAE@XZ PROC				; PoolAllocator::PoolAllocator, COMDAT
; _this$ = ecx

; 11   :     usingBucketsNum(0), bucketSize(0), bucketsNum(0) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __98FED0A8_PoolAllocator@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PoolAllocator@@6B@

; 10   :     : heap(nullptr), buckets(nullptr), firstFreeBucket(nullptr),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 11   :     usingBucketsNum(0), bucketSize(0), bucketsNum(0) {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0PoolAllocator@@QAE@XZ ENDP				; PoolAllocator::PoolAllocator
_TEXT	ENDS
END
