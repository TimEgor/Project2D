; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceCreator.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__8B404B8B_vcruntime_new@h DB 01H
__3C2D1DF9_Resource@h DB 01H
__E77FCB6C_ResourceCreator@h DB 01H
__810F60AC_FileSystem@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__E9466C31_cstdlib DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__4C8DB69C_cstddef DB 01H
__A47FD3F7_limits DB 01H
__77E6CA79_type_traits DB 01H
__20BB4341_malloc@h DB 01H
__604808BE_vcruntime_exception@h DB 01H
__8655F6A9_exception DB 01H
__A751F051_corecrt_memory@h DB 01H
__32E5F013_string@h DB 01H
__DEE7E6EF_xutility DB 01H
__B4DE8A79_xmemory DB 01H
__6C99B47D_algorithm DB 01H
__2DE1CA0A_ratio DB 01H
__A0B61CF9_time@h DB 01H
__C092D57D_chrono DB 01H
__415253A4_cmath DB 01H
__E7714AE5_tuple DB 01H
__EA01D114_xpolymorphic_allocator@h DB 01H
__C00D0CE5_xstring DB 01H
__0F1BCCF4_stdexcept DB 01H
__C1F7FE2D_xcall_once@h DB 01H
__CBA6A69C_xthreads@h DB 01H
__CF4A8F35_atomic DB 01H
__7EAAEC0D_system_error DB 01H
__EC89C42C_vcruntime_typeinfo@h DB 01H
__AE3815F6_typeinfo DB 01H
__18D1DF79_memory DB 01H
__34948876_xfacet DB 01H
__B2D2BA86_ctype@h DB 01H
__B1B1F63E_xlocinfo DB 01H
__1F3378D4_xlocale DB 01H
__8854812D_xiosbase DB 01H
__81B41EC3_xlocnum DB 01H
__5618765D_ios DB 01H
__AAD60BFB_xlocmon DB 01H
__15AC5F2C_xloctime DB 01H
__333F8FA8_xlocmes DB 01H
__18C7867E_xfilesystem_abi@h DB 01H
__71B70C9A_list DB 01H
__A704387C_filesystem DB 01H
__D426F35F_NativeFileSystem@h DB 01H
__2A0FE41E_ResourceName@h DB 01H
__7EACF2A1_xbit_ops@h DB 01H
__2EFD93C2_xhash DB 01H
__8DDDD29B_ZipFile@h DB 01H
__CAC6B671_ZipFileSystem@h DB 01H
__FAF99A17_ResourceHandler@h DB 01H
__B6913FC7_ResourceCreator@cpp DB 01H
__EA3A8D1F_unordered_map DB 01H
__E9D2A317_vector DB 01H
__B33C2DD4_locale DB 01H
__6FF3972A_istream DB 01H
__0C23A210_ostream DB 01H
__0DBB7448_streambuf DB 01H
__DE4BE9BA_utility DB 01H
__CF4B51AF_iterator DB 01H
__68960671_iosfwd DB 01H
__29547EA8_xstddef DB 01H
__8C597A7F_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	??1Resource@@UAE@XZ				; Resource::~Resource
PUBLIC	??0Resource@@QAE@XZ				; Resource::Resource
PUBLIC	??_GResource@@UAEPAXI@Z				; Resource::`scalar deleting destructor'
PUBLIC	??0DefaultResource@@QAE@PAXI@Z			; DefaultResource::DefaultResource
PUBLIC	?getResourceType@DefaultResource@@UAE?AW4ResourceType@@XZ ; DefaultResource::getResourceType
PUBLIC	??1DefaultResource@@UAE@XZ			; DefaultResource::~DefaultResource
PUBLIC	?__autoclassinit2@DefaultResource@@QAEXI@Z	; DefaultResource::__autoclassinit2
PUBLIC	??_GDefaultResource@@UAEPAXI@Z			; DefaultResource::`scalar deleting destructor'
PUBLIC	?createResourceFromZipFileSystem@DefaultResourceCreator@@UAEXAAVResourceHandler@@IAAVZipFileSystem@@@Z ; DefaultResourceCreator::createResourceFromZipFileSystem
PUBLIC	?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z ; DefaultResourceCreator::createResourceFromMemory
PUBLIC	_wmemcpy
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	?store@?$_Atomic_storage@PAVResource@@$03@std@@QAEXQAVResource@@@Z ; std::_Atomic_storage<Resource *,4>::store
PUBLIC	??4?$atomic@PAVResource@@@std@@QAEPAVResource@@QAV2@@Z ; std::atomic<Resource *>::operator=
PUBLIC	?setResource@ResourceHandler@@QAEXPAVResource@@@Z ; ResourceHandler::setResource
PUBLIC	??$_Atomic_address_as@JU?$_Atomic_padded@PAVResource@@@std@@@std@@YAPCJAAU?$_Atomic_padded@PAVResource@@@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<Resource *> >
PUBLIC	??$_Atomic_reinterpret_as@JPAVResource@@@std@@YAJABQAVResource@@@Z ; std::_Atomic_reinterpret_as<long,Resource *>
PUBLIC	__JustMyCode_Default
PUBLIC	??_7Resource@@6B@				; Resource::`vftable'
PUBLIC	??_7DefaultResource@@6B@			; DefaultResource::`vftable'
PUBLIC	??_C@_0GL@NDAGNCF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GL@IOHNGPIE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??createResourceFromZipFileSystem@DefaultResourceCreator@@UAEXAAVResourceHandler@@IAAVZipFileSystem@@@Z@4JA ; `DefaultResourceCreator::createResourceFromZipFileSystem'::`1'::__LINE__Var
PUBLIC	??_C@_1NK@PKKDGBJJ@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAt?$AAi?$AAm?$AA2?$AA3?$AA?2@ ; `string'
PUBLIC	??_C@_1BA@CCOGPCLI@?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_R4Resource@@6B@				; Resource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVResource@@@8				; Resource `RTTI Type Descriptor'
PUBLIC	??_R3Resource@@8				; Resource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Resource@@8				; Resource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Resource@@8			; Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DefaultResource@@6B@			; DefaultResource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDefaultResource@@@8			; DefaultResource `RTTI Type Descriptor'
PUBLIC	??_R3DefaultResource@@8				; DefaultResource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DefaultResource@@8				; DefaultResource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DefaultResource@@8		; DefaultResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp___calloc_dbg:PROC
EXTRN	??_EResource@@UAEPAXI@Z:PROC			; Resource::`vector deleting destructor'
EXTRN	??_EDefaultResource@@UAEPAXI@Z:PROC		; DefaultResource::`vector deleting destructor'
EXTRN	_memcpy:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	?getResourceSize@ZipFileSystem@@UAE_NIAAI@Z:PROC ; ZipFileSystem::getResourceSize
EXTRN	?getResourceData@ZipFileSystem@@UAE_NIPAXI@Z:PROC ; ZipFileSystem::getResourceData
EXTRN	__imp___wassert:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@DefaultResource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DefaultResource@@8 DD FLAT:??_R0?AVDefaultResource@@@8 ; DefaultResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DefaultResource@@8
rdata$r	ENDS
;	COMDAT ??_R2DefaultResource@@8
rdata$r	SEGMENT
??_R2DefaultResource@@8 DD FLAT:??_R1A@?0A@EA@DefaultResource@@8 ; DefaultResource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Resource@@8
rdata$r	ENDS
;	COMDAT ??_R3DefaultResource@@8
rdata$r	SEGMENT
??_R3DefaultResource@@8 DD 00H				; DefaultResource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DefaultResource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDefaultResource@@@8
data$rs	SEGMENT
??_R0?AVDefaultResource@@@8 DD FLAT:??_7type_info@@6B@	; DefaultResource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDefaultResource@@', 00H
data$rs	ENDS
;	COMDAT ??_R4DefaultResource@@6B@
rdata$r	SEGMENT
??_R4DefaultResource@@6B@ DD 00H			; DefaultResource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDefaultResource@@@8
	DD	FLAT:??_R3DefaultResource@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Resource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Resource@@8 DD FLAT:??_R0?AVResource@@@8	; Resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Resource@@8
rdata$r	ENDS
;	COMDAT ??_R2Resource@@8
rdata$r	SEGMENT
??_R2Resource@@8 DD FLAT:??_R1A@?0A@EA@Resource@@8	; Resource::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Resource@@8
rdata$r	SEGMENT
??_R3Resource@@8 DD 00H					; Resource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Resource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVResource@@@8
data$rs	SEGMENT
??_R0?AVResource@@@8 DD FLAT:??_7type_info@@6B@		; Resource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVResource@@', 00H
data$rs	ENDS
;	COMDAT ??_R4Resource@@6B@
rdata$r	SEGMENT
??_R4Resource@@6B@ DD 00H				; Resource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVResource@@@8
	DD	FLAT:??_R3Resource@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@CCOGPCLI@?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAr@
CONST	SEGMENT
??_C@_1BA@CCOGPCLI@?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAr@ DB 'c', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@PKKDGBJJ@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAt?$AAi?$AAm?$AA2?$AA3?$AA?2@
CONST	SEGMENT
??_C@_1NK@PKKDGBJJ@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAt?$AAi?$AAm?$AA2?$AA3?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 't', 00H, 'i', 00H, 'm', 00H, '2', 00H, '3'
	DB	00H, '\', 00H, 'D', 00H, 'o', 00H, 'c', 00H, 'u', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, 'V', 00H, 'i'
	DB	00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'S', 00H
	DB	't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, '2'
	DB	00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'P', 00H, 'r', 00H
	DB	'o', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '2', 00H, 'D', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o'
	DB	00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '2', 00H, 'D', 00H
	DB	'\', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 'M', 00H, 'a', 00H, 'n', 00H, 'a', 00H
	DB	'g', 00H, 'e', 00H, 'r', 00H, '\', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'C', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??createResourceFromZipFileSystem@DefaultResourceCreator@@UAEXAAVResourceHandler@@IAAVZipFileSystem@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??createResourceFromZipFileSystem@DefaultResourceCreator@@UAEXAAVResourceHandler@@IAAVZipFileSystem@@@Z@4JA DD 0aH ; `DefaultResourceCreator::createResourceFromZipFileSystem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GL@IOHNGPIE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GL@IOHNGPIE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Professional\VC'
	DB	'\Tools\MSVC\14.28.29333\include\xlocnum', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 05aH ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GL@NDAGNCF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GL@NDAGNCF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Prog'
	DB	'ram Files (x86)\Microsoft Visual Studio\2019\Professional\VC\'
	DB	'Tools\MSVC\14.28.29333\include\xlocale', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7DefaultResource@@6B@
CONST	SEGMENT
??_7DefaultResource@@6B@ DD FLAT:??_R4DefaultResource@@6B@ ; DefaultResource::`vftable'
	DD	FLAT:??_EDefaultResource@@UAEPAXI@Z
	DD	FLAT:?getResourceType@DefaultResource@@UAE?AW4ResourceType@@XZ
CONST	ENDS
;	COMDAT ??_7Resource@@6B@
CONST	SEGMENT
??_7Resource@@6B@ DD FLAT:??_R4Resource@@6B@		; Resource::`vftable'
	DD	FLAT:??_EResource@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z$0
__ehfuncinfo$?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\atomic
;	COMDAT ??$_Atomic_reinterpret_as@JPAVResource@@@std@@YAJABQAVResource@@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_reinterpret_as@JPAVResource@@@std@@YAJABQAVResource@@@Z PROC ; std::_Atomic_reinterpret_as<long,Resource *>, COMDAT

; 287  : _NODISCARD _Integral _Atomic_reinterpret_as(const _Ty& _Source) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __CF4A8F35_atomic
	call	@__CheckForDebuggerJustMyCode@4

; 288  :     // interprets _Source as the supplied integral type
; 289  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 290  : #if _HAS_IF_CONSTEXPR
; 291  :     if constexpr (is_integral_v<_Ty> && sizeof(_Integral) == sizeof(_Ty)) {
; 292  :         return static_cast<_Integral>(_Source);
; 293  :     } else if constexpr (is_pointer_v<_Ty> && sizeof(_Integral) == sizeof(_Ty)) {
; 294  :         return reinterpret_cast<_Integral>(_Source);

	mov	eax, DWORD PTR __Source$[ebp]
	mov	eax, DWORD PTR [eax]

; 295  :     } else
; 296  : #endif // _HAS_IF_CONSTEXPR
; 297  :     {
; 298  :         _Integral _Result{}; // zero padding bits
; 299  :         _CSTD memcpy(&_Result, _STD addressof(_Source), sizeof(_Source));
; 300  :         return _Result;
; 301  :     }
; 302  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Atomic_reinterpret_as@JPAVResource@@@std@@YAJABQAVResource@@@Z ENDP ; std::_Atomic_reinterpret_as<long,Resource *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@JU?$_Atomic_padded@PAVResource@@@std@@@std@@YAPCJAAU?$_Atomic_padded@PAVResource@@@0@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@JU?$_Atomic_padded@PAVResource@@@std@@@std@@YAPCJAAU?$_Atomic_padded@PAVResource@@@0@@Z PROC ; std::_Atomic_address_as<long,std::_Atomic_padded<Resource *> >, COMDAT

; 94   : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8C597A7F_xatomic@h
	call	@__CheckForDebuggerJustMyCode@4

; 95   :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 96   :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 97   :     return &reinterpret_cast<volatile _Integral&>(_Source);

	mov	eax, DWORD PTR __Source$[ebp]

; 98   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Atomic_address_as@JU?$_Atomic_padded@PAVResource@@@std@@@std@@YAPCJAAU?$_Atomic_padded@PAVResource@@@0@@Z ENDP ; std::_Atomic_address_as<long,std::_Atomic_padded<Resource *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceHandler.h
;	COMDAT ?setResource@ResourceHandler@@QAEXPAVResource@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_newResource$ = 8					; size = 4
?setResource@ResourceHandler@@QAEXPAVResource@@@Z PROC	; ResourceHandler::setResource, COMDAT
; _this$ = ecx

; 21   : 	void setResource(Resource* newResource) { resource = newResource; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __FAF99A17_ResourceHandler@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _newResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$atomic@PAVResource@@@std@@QAEPAVResource@@QAV2@@Z ; std::atomic<Resource *>::operator=
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setResource@ResourceHandler@@QAEXPAVResource@@@Z ENDP	; ResourceHandler::setResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\atomic
;	COMDAT ??4?$atomic@PAVResource@@@std@@QAEPAVResource@@QAV2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Value$ = 8						; size = 4
??4?$atomic@PAVResource@@@std@@QAEPAVResource@@QAV2@@Z PROC ; std::atomic<Resource *>::operator=, COMDAT
; _this$ = ecx

; 2199 :     _Ty operator=(const _Ty _Value) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __CF4A8F35_atomic
	call	@__CheckForDebuggerJustMyCode@4

; 2200 :         this->store(_Value);

	mov	eax, DWORD PTR __Value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?store@?$_Atomic_storage@PAVResource@@$03@std@@QAEXQAVResource@@@Z ; std::_Atomic_storage<Resource *,4>::store

; 2201 :         return _Value;

	mov	eax, DWORD PTR __Value$[ebp]

; 2202 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$atomic@PAVResource@@@std@@QAEPAVResource@@QAV2@@Z ENDP ; std::atomic<Resource *>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\atomic
;	COMDAT ?store@?$_Atomic_storage@PAVResource@@$03@std@@QAEXQAVResource@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Value$ = 8						; size = 4
?store@?$_Atomic_storage@PAVResource@@$03@std@@QAEXQAVResource@@@Z PROC ; std::_Atomic_storage<Resource *,4>::store, COMDAT
; _this$ = ecx

; 880  :     void store(const _TVal _Value) noexcept { // store with sequential consistency

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __CF4A8F35_atomic
	call	@__CheckForDebuggerJustMyCode@4

; 881  : #if defined(_M_ARM) || defined(_M_ARM64)
; 882  :         _Memory_barrier();
; 883  :         __iso_volatile_store32(_Atomic_address_as<int>(_Storage), _Atomic_reinterpret_as<int>(_Value));
; 884  :         _Memory_barrier();
; 885  : #else // ^^^ ARM32/ARM64 hardware / x86/x64 hardware vvv
; 886  :         (void) _InterlockedExchange(_Atomic_address_as<long>(_Storage), _Atomic_reinterpret_as<long>(_Value));

	lea	eax, DWORD PTR __Value$[ebp]
	push	eax
	call	??$_Atomic_reinterpret_as@JPAVResource@@@std@@YAJABQAVResource@@@Z ; std::_Atomic_reinterpret_as<long,Resource *>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$_Atomic_address_as@JU?$_Atomic_padded@PAVResource@@@std@@@std@@YAPCJAAU?$_Atomic_padded@PAVResource@@@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<Resource *> >
	add	esp, 4
	xchg	DWORD PTR [eax], esi

; 887  : #endif // hardware
; 888  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?store@?$_Atomic_storage@PAVResource@@$03@std@@QAEXQAVResource@@@Z ENDP ; std::_Atomic_storage<Resource *,4>::store
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -252						; size = 44
_this$ = -8						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 181  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __15AC5F2C_xloctime
	call	@__CheckForDebuggerJustMyCode@4

; 182  :         _Cvt = _Lobj._Getcvt();

	mov	esi, esp
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 24					; 00000018H
	mov	ecx, 11					; 0000000bH
	mov	esi, eax
	rep movsd

; 183  : 
; 184  :         if (is_same_v<_Elem2, wchar_t>) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Getvals

; 185  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

	mov	esi, esp
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 186  :             _Months =

	mov	esi, esp
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 187  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 188  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

	push	OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 189  :         } else {

	jmp	SHORT $LN1@Getvals
$LN2@Getvals:

; 190  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	0
	mov	esi, esp
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 191  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	0
	mov	esi, esp
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 192  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	0
	push	OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
	call	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 193  :         }
; 194  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -252						; size = 44
_this$ = -8						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 181  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __15AC5F2C_xloctime
	call	@__CheckForDebuggerJustMyCode@4

; 182  :         _Cvt = _Lobj._Getcvt();

	mov	esi, esp
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 24					; 00000018H
	mov	ecx, 11					; 0000000bH
	mov	esi, eax
	rep movsd

; 183  : 
; 184  :         if (is_same_v<_Elem2, wchar_t>) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Getvals

; 185  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

	mov	esi, esp
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 186  :             _Months =

	mov	esi, esp
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 187  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 188  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

	push	OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 189  :         } else {

	jmp	SHORT $LN1@Getvals
$LN2@Getvals:

; 190  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	0
	mov	esi, esp
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 191  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	0
	mov	esi, esp
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 192  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	0
	push	OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
	call	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 193  :         }
; 194  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -32					; size = 4
__Ptrdest$ = -20					; size = 4
__Count$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 520  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1F3378D4_xlocale
	call	@__CheckForDebuggerJustMyCode@4

; 521  :     // convert C string to _Elem sequence using _Cvtvec
; 522  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR __Count$[ebp], eax

; 523  : 
; 524  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

	mov	esi, esp
	push	524					; 0000020cH
	push	OFFSET ??_C@_0GL@NDAGNCF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	push	1
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	DWORD PTR __imp___calloc_dbg
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Ptrdest$[ebp], eax

; 525  : 
; 526  :     if (!_Ptrdest) {

	cmp	DWORD PTR __Ptrdest$[ebp], 0
	jne	SHORT $LN5@Maklocstr

; 527  :         _Xbad_alloc();

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN5@Maklocstr:

; 528  :     }
; 529  : 
; 530  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

	mov	eax, DWORD PTR __Ptrdest$[ebp]
	mov	DWORD PTR __Ptrnext$1[ebp], eax
	jmp	SHORT $LN4@Maklocstr
$LN2@Maklocstr:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __Ptrnext$1[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ptrnext$1[ebp], ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@Maklocstr

; 531  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

	mov	eax, DWORD PTR __Ptrnext$1[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 532  :     }

	jmp	SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 533  : 
; 534  :     return _Ptrdest;

	mov	eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 535  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -20					; size = 4
__Count$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 90   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __81B41EC3_xlocnum
	call	@__CheckForDebuggerJustMyCode@4

; 91   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

	mov	esi, esp
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR __Count$[ebp], eax

; 92   : 
; 93   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

	mov	eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
	add	eax, 3
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0GL@IOHNGPIE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	push	2
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	DWORD PTR __imp___calloc_dbg
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Ptrdest$[ebp], eax

; 94   : 
; 95   :     if (!_Ptrdest) {

	cmp	DWORD PTR __Ptrdest$[ebp], 0
	jne	SHORT $LN2@Maklocwcs

; 96   :         _Xbad_alloc();

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN2@Maklocwcs:

; 97   :     }
; 98   : 
; 99   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptrdest$[ebp]
	push	edx
	call	_wmemcpy
	add	esp, 12					; 0000000cH

; 100  :     return _Ptrdest;

	mov	eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 101  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -128						; size = 8
__Ptrnext$ = -112					; size = 4
__Ptrdest$ = -100					; size = 4
__Mbst1$ = -88						; size = 8
__Wc$ = -72						; size = 2
__Bytes$ = -60						; size = 4
__Ptr1$ = -48						; size = 4
__Wchars$ = -36						; size = 4
__Count1$ = -24						; size = 4
__Count$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 538  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __1F3378D4_xlocale
	call	@__CheckForDebuggerJustMyCode@4

; 539  :     // convert C string to wchar_t sequence using _Cvtvec
; 540  :     size_t _Count;
; 541  :     size_t _Count1;
; 542  :     size_t _Wchars;
; 543  :     const char* _Ptr1;
; 544  :     int _Bytes;
; 545  :     wchar_t _Wc;
; 546  :     mbstate_t _Mbst1 = {};

	xor	eax, eax
	mov	DWORD PTR __Mbst1$[ebp], eax
	mov	DWORD PTR __Mbst1$[ebp+4], eax

; 547  : 
; 548  :     _Count1 = _CSTD strlen(_Ptr) + 1;

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR __Count1$[ebp], eax

; 549  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

	mov	eax, DWORD PTR __Count1$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Wchars$[ebp], 0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Ptr1$[ebp], ecx
	jmp	SHORT $LN4@Maklocstr
$LN2@Maklocstr:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __Ptr1$[ebp]
	add	ecx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR __Ptr1$[ebp], ecx
	mov	edx, DWORD PTR __Wchars$[ebp]
	add	edx, 1
	mov	DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@Maklocstr

; 550  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

	mov	eax, DWORD PTR __Cvt$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Mbst1$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr1$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Wc$[ebp]
	push	ecx
	call	__Mbrtowc
	add	esp, 20					; 00000014H
	mov	DWORD PTR __Bytes$[ebp], eax
	cmp	DWORD PTR __Bytes$[ebp], 0
	jg	SHORT $LN8@Maklocstr

; 551  :             break;

	jmp	SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 552  :         }
; 553  :     }

	jmp	SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 554  : 
; 555  :     ++_Wchars; // count terminating nul

	mov	eax, DWORD PTR __Wchars$[ebp]
	add	eax, 1
	mov	DWORD PTR __Wchars$[ebp], eax

; 556  : 
; 557  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

	mov	esi, esp
	push	557					; 0000022dH
	push	OFFSET ??_C@_0GL@NDAGNCF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	push	2
	mov	eax, DWORD PTR __Wchars$[ebp]
	push	eax
	call	DWORD PTR __imp___calloc_dbg
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Ptrdest$[ebp], eax

; 558  : 
; 559  :     if (!_Ptrdest) {

	cmp	DWORD PTR __Ptrdest$[ebp], 0
	jne	SHORT $LN9@Maklocstr

; 560  :         _Xbad_alloc();

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN9@Maklocstr:

; 561  :     }
; 562  : 
; 563  :     wchar_t* _Ptrnext = _Ptrdest;

	mov	eax, DWORD PTR __Ptrdest$[ebp]
	mov	DWORD PTR __Ptrnext$[ebp], eax

; 564  :     mbstate_t _Mbst2  = {};

	xor	eax, eax
	mov	DWORD PTR __Mbst2$[ebp], eax
	mov	DWORD PTR __Mbst2$[ebp+4], eax

; 565  : 
; 566  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

	jmp	SHORT $LN7@Maklocstr
$LN5@Maklocstr:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	mov	edx, DWORD PTR __Wchars$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Wchars$[ebp], edx
	mov	eax, DWORD PTR __Ptrnext$[ebp]
	add	eax, 2
	mov	DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:
	cmp	DWORD PTR __Wchars$[ebp], 0
	jbe	SHORT $LN6@Maklocstr

; 567  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

	mov	eax, DWORD PTR __Cvt$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Mbst2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count1$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptrnext$[ebp]
	push	ecx
	call	__Mbrtowc
	add	esp, 20					; 00000014H
	mov	DWORD PTR __Bytes$[ebp], eax
	cmp	DWORD PTR __Bytes$[ebp], 0
	jg	SHORT $LN10@Maklocstr

; 568  :             break;

	jmp	SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 569  :         }
; 570  :     }

	jmp	SHORT $LN5@Maklocstr
$LN6@Maklocstr:

; 571  : 
; 572  :     *_Ptrnext = L'\0';

	xor	eax, eax
	mov	ecx, DWORD PTR __Ptrnext$[ebp]
	mov	WORD PTR [ecx], ax

; 573  : 
; 574  :     return _Ptrdest;

	mov	eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 575  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Maklocstr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@Maklocstr:
	DD	3
	DD	$LN15@Maklocstr
$LN15@Maklocstr:
	DD	-72					; ffffffb8H
	DD	2
	DD	$LN12@Maklocstr
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN13@Maklocstr
	DD	-128					; ffffff80H
	DD	8
	DD	$LN14@Maklocstr
$LN14@Maklocstr:
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	50					; 00000032H
	DB	0
$LN13@Maklocstr:
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	49					; 00000031H
	DB	0
$LN12@Maklocstr:
	DB	95					; 0000005fH
	DB	87					; 00000057H
	DB	99					; 00000063H
	DB	0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 234  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __93DC0B45_wchar@h
	call	@__CheckForDebuggerJustMyCode@4

; 235  :         #pragma warning(suppress: 6386) // Buffer overrun
; 236  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR __N$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __S2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __S1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 237  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceCreator.cpp
;	COMDAT ?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z
_TEXT	SEGMENT
tv79 = -256						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
_defaultResource$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_handler$ = 8						; size = 4
_data$ = 12						; size = 4
_dataSize$ = 16						; size = 4
?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z PROC ; DefaultResourceCreator::createResourceFromMemory, COMDAT
; _this$ = ecx

; 23   : void DefaultResourceCreator::createResourceFromMemory(ResourceHandler& handler, void* data, size_t dataSize) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6913FC7_ResourceCreator@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 24   : 	DefaultResource* defaultResource = new DefaultResource(data, dataSize);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@createReso
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T2[ebp]
	call	?__autoclassinit2@DefaultResource@@QAEXI@Z
	mov	eax, DWORD PTR _dataSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0DefaultResource@@QAE@PAXI@Z		; DefaultResource::DefaultResource
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@createReso
$LN3@createReso:
	mov	DWORD PTR tv79[ebp], 0
$LN4@createReso:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _defaultResource$[ebp], eax

; 25   : 	handler.setResource(defaultResource);

	mov	eax, DWORD PTR _defaultResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	call	?setResource@ResourceHandler@@QAEXPAVResource@@@Z ; ResourceHandler::setResource

; 26   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z$0:
	push	12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z ENDP ; DefaultResourceCreator::createResourceFromMemory
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceCreator.cpp
;	COMDAT ?createResourceFromZipFileSystem@DefaultResourceCreator@@UAEXAAVResourceHandler@@IAAVZipFileSystem@@@Z
_TEXT	SEGMENT
$T1 = -252						; size = 4
_data$ = -48						; size = 4
_checker$ = -33						; size = 1
_resourceSize$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_handler$ = 8						; size = 4
_resourceID$ = 12					; size = 4
_zipFileSystem$ = 16					; size = 4
?createResourceFromZipFileSystem@DefaultResourceCreator@@UAEXAAVResourceHandler@@IAAVZipFileSystem@@@Z PROC ; DefaultResourceCreator::createResourceFromZipFileSystem, COMDAT
; _this$ = ecx

; 10   : void DefaultResourceCreator::createResourceFromZipFileSystem(ResourceHandler& handler, ResourceID resourceID, ZipFileSystem& zipFileSystem) {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B6913FC7_ResourceCreator@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 11   : 	size_t resourceSize = 0;

	mov	DWORD PTR _resourceSize$[ebp], 0

; 12   : 	bool checker = false;

	mov	BYTE PTR _checker$[ebp], 0

; 13   : 	checker = zipFileSystem.getResourceSize(resourceID, resourceSize);

	lea	eax, DWORD PTR _resourceSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _resourceID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _zipFileSystem$[ebp]
	call	?getResourceSize@ZipFileSystem@@UAE_NIAAI@Z ; ZipFileSystem::getResourceSize
	mov	BYTE PTR _checker$[ebp], al

; 14   : 	assert(checker);

	movzx	eax, BYTE PTR _checker$[ebp]
	test	eax, eax
	jne	SHORT $LN3@createReso
	mov	ecx, DWORD PTR ?__LINE__Var@?0??createResourceFromZipFileSystem@DefaultResourceCreator@@UAEXAAVResourceHandler@@IAAVZipFileSystem@@@Z@4JA
	add	ecx, 4
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1NK@PKKDGBJJ@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAt?$AAi?$AAm?$AA2?$AA3?$AA?2@
	push	OFFSET ??_C@_1BA@CCOGPCLI@?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@createReso:

; 15   : 
; 16   : 	void* data = new uint8_t[resourceSize];

	mov	eax, DWORD PTR _resourceSize$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _data$[ebp], ecx

; 17   : 	checker = zipFileSystem.getResourceData(resourceID, data, resourceSize);

	mov	eax, DWORD PTR _resourceSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _resourceID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _zipFileSystem$[ebp]
	call	?getResourceData@ZipFileSystem@@UAE_NIPAXI@Z ; ZipFileSystem::getResourceData
	mov	BYTE PTR _checker$[ebp], al

; 18   : 	assert(checker);

	movzx	eax, BYTE PTR _checker$[ebp]
	test	eax, eax
	jne	SHORT $LN4@createReso
	mov	ecx, DWORD PTR ?__LINE__Var@?0??createResourceFromZipFileSystem@DefaultResourceCreator@@UAEXAAVResourceHandler@@IAAVZipFileSystem@@@Z@4JA
	add	ecx, 8
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1NK@PKKDGBJJ@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAt?$AAi?$AAm?$AA2?$AA3?$AA?2@
	push	OFFSET ??_C@_1BA@CCOGPCLI@?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@createReso:

; 19   : 
; 20   : 	createResourceFromMemory(handler, data, resourceSize);

	mov	eax, DWORD PTR _resourceSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handler$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?createResourceFromMemory@DefaultResourceCreator@@UAEXAAVResourceHandler@@PAXI@Z ; DefaultResourceCreator::createResourceFromMemory

; 21   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@createReso
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN7@createReso:
	DD	1
	DD	$LN6@createReso
$LN6@createReso:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@createReso
$LN5@createReso:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?createResourceFromZipFileSystem@DefaultResourceCreator@@UAEXAAVResourceHandler@@IAAVZipFileSystem@@@Z ENDP ; DefaultResourceCreator::createResourceFromZipFileSystem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GDefaultResource@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GDefaultResource@@UAEPAXI@Z PROC			; DefaultResource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DefaultResource@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDefaultResource@@UAEPAXI@Z ENDP			; DefaultResource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@DefaultResource@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@DefaultResource@@QAEXI@Z PROC		; DefaultResource::__autoclassinit2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _classSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?__autoclassinit2@DefaultResource@@QAEXI@Z ENDP		; DefaultResource::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1DefaultResource@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1DefaultResource@@UAE@XZ PROC				; DefaultResource::~DefaultResource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@@UAE@XZ			; Resource::~Resource
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1DefaultResource@@UAE@XZ ENDP				; DefaultResource::~DefaultResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\Resource.h
;	COMDAT ?getResourceType@DefaultResource@@UAE?AW4ResourceType@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getResourceType@DefaultResource@@UAE?AW4ResourceType@@XZ PROC ; DefaultResource::getResourceType, COMDAT
; _this$ = ecx

; 27   : 	virtual ResourceType getResourceType() override { return DefaultResourceType; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __3C2D1DF9_Resource@h
	call	@__CheckForDebuggerJustMyCode@4
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getResourceType@DefaultResource@@UAE?AW4ResourceType@@XZ ENDP ; DefaultResource::getResourceType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\Resource.h
;	COMDAT ??0DefaultResource@@QAE@PAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
??0DefaultResource@@QAE@PAXI@Z PROC			; DefaultResource::DefaultResource, COMDAT
; _this$ = ecx

; 21   : 	DefaultResource(void* data, size_t size)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __3C2D1DF9_Resource@h
	call	@__CheckForDebuggerJustMyCode@4

; 22   : 		: data(data), dataSize(size) {}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Resource@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DefaultResource@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0DefaultResource@@QAE@PAXI@Z ENDP			; DefaultResource::DefaultResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GResource@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GResource@@UAEPAXI@Z PROC				; Resource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Resource@@UAE@XZ			; Resource::~Resource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GResource@@UAEPAXI@Z ENDP				; Resource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Resource@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Resource@@QAE@XZ PROC				; Resource::Resource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Resource@@QAE@XZ ENDP				; Resource::Resource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\Resource.h
;	COMDAT ??1Resource@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Resource@@UAE@XZ PROC				; Resource::~Resource, COMDAT
; _this$ = ecx

; 11   : 	virtual ~Resource() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __3C2D1DF9_Resource@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Resource@@6B@
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Resource@@UAE@XZ ENDP				; Resource::~Resource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceCreator.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6913FC7_ResourceCreator@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceCreator.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6913FC7_ResourceCreator@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceCreator.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6913FC7_ResourceCreator@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\ResourceManager\ResourceCreator.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6913FC7_ResourceCreator@cpp
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
