; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocatorVector.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__BE586046_PoolAllocator@h DB 01H
__8B404B8B_vcruntime_new@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__E9466C31_cstdlib DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__4C8DB69C_cstddef DB 01H
__A47FD3F7_limits DB 01H
__77E6CA79_type_traits DB 01H
__20BB4341_malloc@h DB 01H
__604808BE_vcruntime_exception@h DB 01H
__8655F6A9_exception DB 01H
__A751F051_corecrt_memory@h DB 01H
__32E5F013_string@h DB 01H
__DEE7E6EF_xutility DB 01H
__B4DE8A79_xmemory DB 01H
__E7714AE5_tuple DB 01H
__EA01D114_xpolymorphic_allocator@h DB 01H
__61440158_PoolAllocatorVector@h DB 01H
__760A61A5_PoolAllocatorVector@cpp DB 01H
__E9D2A317_vector DB 01H
__DE4BE9BA_utility DB 01H
__29547EA8_xstddef DB 01H
msvcjmc	ENDS
PUBLIC	??1PoolAllocator@@UAE@XZ			; PoolAllocator::~PoolAllocator
PUBLIC	?getHeap@PoolAllocator@@UAEPAVHeap@@XZ		; PoolAllocator::getHeap
PUBLIC	?size@PoolAllocator@@UBEIXZ			; PoolAllocator::size
PUBLIC	?getBucketSize@PoolAllocator@@UBEIXZ		; PoolAllocator::getBucketSize
PUBLIC	?getBucketsNum@PoolAllocator@@UBEIXZ		; PoolAllocator::getBucketsNum
PUBLIC	?isFull@PoolAllocator@@UBE_NXZ			; PoolAllocator::isFull
PUBLIC	?isInit@PoolAllocator@@UBE_NXZ			; PoolAllocator::isInit
PUBLIC	?__autoclassinit2@PoolAllocator@@QAEXI@Z	; PoolAllocator::__autoclassinit2
PUBLIC	??_GPoolAllocator@@UAEPAXI@Z			; PoolAllocator::`scalar deleting destructor'
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??0?$allocator@VPoolAllocator@@@std@@QAE@XZ	; std::allocator<PoolAllocator>::allocator<PoolAllocator>
PUBLIC	?deallocate@?$allocator@VPoolAllocator@@@std@@QAEXQAVPoolAllocator@@I@Z ; std::allocator<PoolAllocator>::deallocate
PUBLIC	?allocate@?$allocator@VPoolAllocator@@@std@@QAEPAVPoolAllocator@@I@Z ; std::allocator<PoolAllocator>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAIABV?$allocator@VPoolAllocator@@@2@@Z ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::max_size
PUBLIC	??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::vector<PoolAllocator,std::allocator<PoolAllocator> >
PUBLIC	?_Move_construct@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Move_construct
PUBLIC	??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::vector<PoolAllocator,std::allocator<PoolAllocator> >
PUBLIC	?_Move_assign@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Move_assign
PUBLIC	??4?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator=
PUBLIC	??1?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::~vector<PoolAllocator,std::allocator<PoolAllocator> >
PUBLIC	?push_back@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEX$$QAVPoolAllocator@@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::push_back
PUBLIC	?end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::end
PUBLIC	?rbegin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::rbegin
PUBLIC	?_Unchecked_begin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Unchecked_end
PUBLIC	?max_size@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::max_size
PUBLIC	?capacity@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::capacity
PUBLIC	??A?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAVPoolAllocator@@I@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator[]
PUBLIC	?_Umove@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEPAVPoolAllocator@@PAV3@00@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@00U?$integral_constant@_N$00@2@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@00@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@0@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEII@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXQAVPoolAllocator@@II@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Change_array
PUBLIC	?_Tidy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXXZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Tidy
PUBLIC	?_Xlength@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@CAXXZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEXPAVPoolAllocator@@0@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Orphan_range
PUBLIC	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
PUBLIC	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEABV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<PoolAllocator> >::_Vector_val<std::_Simple_types<PoolAllocator> >
PUBLIC	?_Take_contents@?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<PoolAllocator> >::_Take_contents
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QBEABV?$allocator@VPoolAllocator@@@2@XZ ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Get_first
PUBLIC	??0PoolAllocatorVector@@QAE@$$QAV0@@Z		; PoolAllocatorVector::PoolAllocatorVector
PUBLIC	??4PoolAllocatorVector@@QAEAAV0@$$QAV0@@Z	; PoolAllocatorVector::operator=
PUBLIC	?release@PoolAllocatorVector@@QAEXXZ		; PoolAllocatorVector::release
PUBLIC	?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ ; PoolAllocatorVector::allocate
PUBLIC	?deallocate@PoolAllocatorVector@@QAEXIPAX@Z	; PoolAllocatorVector::deallocate
PUBLIC	?deallocate@PoolAllocatorVector@@QAEXABUAllocationInfo@1@@Z ; PoolAllocatorVector::deallocate
PUBLIC	??$move@AAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YA$$QAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z ; std::move<std::vector<PoolAllocator,std::allocator<PoolAllocator> > &>
PUBLIC	??$move@AAVPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::move<PoolAllocator &>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@PAVPoolAllocator@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QBEABVPoolAllocator@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator*
PUBLIC	??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator--
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QBEAAVPoolAllocator@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator*
PUBLIC	??F?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator--
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
PUBLIC	?__autoclassinit2@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEXI@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::__autoclassinit2
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@PAVPoolAllocator@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
PUBLIC	??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@1@@Z ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >
PUBLIC	??D?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QBEAAVPoolAllocator@@XZ ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::operator*
PUBLIC	??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@XZ ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::~reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >
PUBLIC	??$emplace_back@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAVPoolAllocator@@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::emplace_back<PoolAllocator>
PUBLIC	??$forward@VPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::forward<PoolAllocator>
PUBLIC	??$_Emplace_back_with_unused_capacity@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAE@$$QAVPoolAllocator@@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Emplace_back_with_unused_capacity<PoolAllocator>
PUBLIC	??$_Unfancy@VPoolAllocator@@@std@@YAPAVPoolAllocator@@PAV1@@Z ; std::_Unfancy<PoolAllocator>
PUBLIC	??$construct@VPoolAllocator@@V1@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@$$QAV3@@Z ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::construct<PoolAllocator,PoolAllocator>
PUBLIC	??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Emplace_reallocate<PoolAllocator>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0VPoolAllocator@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VPoolAllocator@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><PoolAllocator>
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$addressof@V?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YAPAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z ; std::addressof<std::vector<PoolAllocator,std::allocator<PoolAllocator> > >
PUBLIC	??$move@AAV?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z ; std::move<std::allocator<PoolAllocator> &>
PUBLIC	??$?0V?$allocator@VPoolAllocator@@@std@@$$V@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@VPoolAllocator@@@1@@Z ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1><std::allocator<PoolAllocator> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1><>
PUBLIC	??$move@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@YA$$QAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > &>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
PUBLIC	??$_Pocma@V?$allocator@VPoolAllocator@@@std@@@std@@YAXAAV?$allocator@VPoolAllocator@@@0@0@Z ; std::_Pocma<std::allocator<PoolAllocator> >
PUBLIC	??$_Destroy_range@V?$allocator@VPoolAllocator@@@std@@@std@@YAXPAVPoolAllocator@@QAV1@AAV?$allocator@VPoolAllocator@@@0@@Z ; std::_Destroy_range<std::allocator<PoolAllocator> >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@V?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z ; std::forward<std::allocator<PoolAllocator> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$destroy@VPoolAllocator@@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@@Z ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::destroy<PoolAllocator>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z ; std::_Uninitialized_move<PoolAllocator *,std::allocator<PoolAllocator> >
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$_Get_size_of_n@$0BM@@std@@YAII@Z		; std::_Get_size_of_n<28>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Get_unwrapped@ABQAVPoolAllocator@@@std@@YA@ABQAVPoolAllocator@@@Z ; std::_Get_unwrapped<PoolAllocator * const &>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@PAVPoolAllocator@@AAV?$allocator@VPoolAllocator@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Uninitialized_backout_al<std::allocator<PoolAllocator> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::~_Uninitialized_backout_al<std::allocator<PoolAllocator> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Release
PUBLIC	?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEXI@Z ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::__autoclassinit2
PUBLIC	??$_Emplace_back@VPoolAllocator@@@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEX$$QAVPoolAllocator@@@Z ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Emplace_back<PoolAllocator>
PUBLIC	__JustMyCode_Default
PUBLIC	??_7PoolAllocator@@6B@				; PoolAllocator::`vftable'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GL@KFPMFPIC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NG@FKHEBIAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GK@MBAODEDK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NE@CLBIMMMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1LC@IMILFHJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0DC@DACNKKOM@can?8t?5decrement?5value?9initializ@ ; `string'
PUBLIC	??_C@_1OG@KDGBAFAP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GI@IDMAFNCG@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0CN@CGJJIGFD@can?8t?5decrement?5vector?5iterator@ ; `string'
PUBLIC	??_C@_1FO@POFEDLP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ ; `string'
PUBLIC	??_C@_1OE@LFPKMJDJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ ; `string'
PUBLIC	??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	??_R4PoolAllocator@@6B@				; PoolAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPoolAllocator@@@8			; PoolAllocator `RTTI Type Descriptor'
PUBLIC	??_R3PoolAllocator@@8				; PoolAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PoolAllocator@@8				; PoolAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PoolAllocator@@8			; PoolAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??0PoolAllocator@@QAE@XZ:PROC			; PoolAllocator::PoolAllocator
EXTRN	??0PoolAllocator@@QAE@$$QAV0@@Z:PROC		; PoolAllocator::PoolAllocator
EXTRN	?init@PoolAllocator@@UAE_NPAVHeap@@II@Z:PROC	; PoolAllocator::init
EXTRN	?release@PoolAllocator@@UAEXXZ:PROC		; PoolAllocator::release
EXTRN	?allocate@PoolAllocator@@UAEPAXXZ:PROC		; PoolAllocator::allocate
EXTRN	?deallocate@PoolAllocator@@UAEXPAX@Z:PROC	; PoolAllocator::deallocate
EXTRN	?clear@PoolAllocator@@UAEXXZ:PROC		; PoolAllocator::clear
EXTRN	??_EPoolAllocator@@UAEPAXI@Z:PROC		; PoolAllocator::`vector deleting destructor'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PoolAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PoolAllocator@@8 DD FLAT:??_R0?AVPoolAllocator@@@8 ; PoolAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PoolAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2PoolAllocator@@8
rdata$r	SEGMENT
??_R2PoolAllocator@@8 DD FLAT:??_R1A@?0A@EA@PoolAllocator@@8 ; PoolAllocator::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PoolAllocator@@8
rdata$r	SEGMENT
??_R3PoolAllocator@@8 DD 00H				; PoolAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PoolAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPoolAllocator@@@8
data$rs	SEGMENT
??_R0?AVPoolAllocator@@@8 DD FLAT:??_7type_info@@6B@	; PoolAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPoolAllocator@@', 00H
data$rs	ENDS
;	COMDAT ??_R4PoolAllocator@@6B@
rdata$r	SEGMENT
??_R4PoolAllocator@@6B@ DD 00H				; PoolAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPoolAllocator@@@8
	DD	FLAT:??_R3PoolAllocator@@8
rdata$r	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
CONST	SEGMENT
??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ DB 'can''t dere'
	DB	'ference out of range vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1OE@LFPKMJDJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1OE@LFPKMJDJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'P', 00H, 'o', 00H
	DB	'o', 00H, 'l', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '*', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
CONST	SEGMENT
??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ DB 'can''t derefe'
	DB	'rence value-initialized vector iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@POFEDLP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1FO@POFEDLP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'b', 00H, 'e', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CGJJIGFD@can?8t?5decrement?5vector?5iterator@
CONST	SEGMENT
??_C@_0CN@CGJJIGFD@can?8t?5decrement?5vector?5iterator@ DB 'can''t decrem'
	DB	'ent vector iterator before begin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@IDMAFNCG@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1GI@IDMAFNCG@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OG@KDGBAFAP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1OG@KDGBAFAP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'P', 00H, 'o', 00H
	DB	'o', 00H, 'l', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '-', 00H, '-', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@DACNKKOM@can?8t?5decrement?5value?9initializ@
CONST	SEGMENT
??_C@_0DC@DACNKKOM@can?8t?5decrement?5value?9initializ@ DB 'can''t decrem'
	DB	'ent value-initialized vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LC@IMILFHJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
CONST	SEGMENT
??_C@_1LC@IMILFHJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'P', 00H, 'o', 00H
	DB	'o', 00H, 'l', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	'P', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 'A', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '[', 00H, ']', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@CLBIMMMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@CLBIMMMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'P'
	DB	00H, 'r', 00H, 'o', 00H, 'f', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H
	DB	's', 00H, '\', 00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H
	DB	'2', 00H, '9', 00H, '3', 00H, '3', 00H, '3', 00H, '\', 00H, 'i'
	DB	00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H
	DB	'\', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@MBAODEDK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GK@MBAODEDK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Professional\VC'
	DB	'\Tools\MSVC\14.28.29333\include\vector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NG@FKHEBIAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NG@FKHEBIAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'P'
	DB	00H, 'r', 00H, 'o', 00H, 'f', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H
	DB	's', 00H, '\', 00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H
	DB	'2', 00H, '9', 00H, '3', 00H, '3', 00H, '3', 00H, '\', 00H, 'i'
	DB	00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H
	DB	'\', 00H, 'x', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r'
	DB	00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GL@KFPMFPIC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GL@KFPMFPIC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Professional\VC'
	DB	'\Tools\MSVC\14.28.29333\include\xmemory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA DD 084H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7PoolAllocator@@6B@
CONST	SEGMENT
??_7PoolAllocator@@6B@ DD FLAT:??_R4PoolAllocator@@6B@	; PoolAllocator::`vftable'
	DD	FLAT:??_EPoolAllocator@@UAEPAXI@Z
	DD	FLAT:?init@PoolAllocator@@UAE_NPAVHeap@@II@Z
	DD	FLAT:?release@PoolAllocator@@UAEXXZ
	DD	FLAT:?allocate@PoolAllocator@@UAEPAXXZ
	DD	FLAT:?deallocate@PoolAllocator@@UAEXPAX@Z
	DD	FLAT:?clear@PoolAllocator@@UAEXXZ
	DD	FLAT:?getHeap@PoolAllocator@@UAEPAVHeap@@XZ
	DD	FLAT:?size@PoolAllocator@@UBEIXZ
	DD	FLAT:?getBucketSize@PoolAllocator@@UBEIXZ
	DD	FLAT:?getBucketsNum@PoolAllocator@@UBEIXZ
	DD	FLAT:?isFull@PoolAllocator@@UBE_NXZ
	DD	FLAT:?isInit@PoolAllocator@@UBE_NXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Destroy_range@V?$allocator@VPoolAllocator@@@std@@@std@@YAXPAVPoolAllocator@@QAV1@AAV?$allocator@VPoolAllocator@@@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z$0
__unwindtable$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ$1
__ehfuncinfo$?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1PoolAllocator@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Emplace_back@VPoolAllocator@@@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEX$$QAVPoolAllocator@@@Z
_TEXT	SEGMENT
tv74 = -216						; size = 4
tv76 = -212						; size = 4
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@VPoolAllocator@@@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEX$$QAVPoolAllocator@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Emplace_back<PoolAllocator>, COMDAT
; _this$ = ecx

; 1545 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@VPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::forward<PoolAllocator>
	add	esp, 4
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@VPoolAllocator@@@std@@YAPAVPoolAllocator@@PAV1@@Z ; std::_Unfancy<PoolAllocator>
	add	esp, 4
	mov	DWORD PTR tv76[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv74[ebp], ecx
	mov	edx, DWORD PTR tv78[ebp]
	push	edx
	mov	eax, DWORD PTR tv76[ebp]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	call	??$construct@VPoolAllocator@@V1@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@$$QAV3@@Z ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::construct<PoolAllocator,PoolAllocator>
	add	esp, 12					; 0000000cH

; 1547 :         ++_Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1548 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@VPoolAllocator@@@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEX$$QAVPoolAllocator@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Emplace_back<PoolAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEXI@Z PROC ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::__autoclassinit2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _classSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEXI@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Release, COMDAT
; _this$ = ecx

; 1550 :     pointer _Release() { // suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1551 :         _First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1552 :         return _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1553 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::~_Uninitialized_backout_al<std::allocator<PoolAllocator> >, COMDAT
; _this$ = ecx

; 1540 :     ~_Uninitialized_backout_al() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1541 :         _Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@VPoolAllocator@@@std@@@std@@YAXPAVPoolAllocator@@QAV1@AAV?$allocator@VPoolAllocator@@@0@@Z ; std::_Destroy_range<std::allocator<PoolAllocator> >
	add	esp, 12					; 0000000cH

; 1542 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::~_Uninitialized_backout_al<std::allocator<PoolAllocator> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@PAVPoolAllocator@@AAV?$allocator@VPoolAllocator@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@PAVPoolAllocator@@AAV?$allocator@VPoolAllocator@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Uninitialized_backout_al<std::allocator<PoolAllocator> >, COMDAT
; _this$ = ecx

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@PAVPoolAllocator@@AAV?$allocator@VPoolAllocator@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Uninitialized_backout_al<std::allocator<PoolAllocator> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAVPoolAllocator@@@std@@YA@ABQAVPoolAllocator@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAVPoolAllocator@@@std@@YA@ABQAVPoolAllocator@@@Z PROC ; std::_Get_unwrapped<PoolAllocator * const &>, COMDAT

; 1300 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __DEE7E6EF_xutility
	call	@__CheckForDebuggerJustMyCode@4

; 1301 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1302 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1303 :         return _It + 0;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1304 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1305 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1306 :     } else {
; 1307 :         return static_cast<_Iter&&>(_It);
; 1308 :     }
; 1309 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_unwrapped@ABQAVPoolAllocator@@@std@@YA@ABQAVPoolAllocator@@@Z ENDP ; std::_Get_unwrapped<PoolAllocator * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -32						; size = 4
__Ptr_container$ = -20					; size = 4
__Block_size$ = -8					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

	mov	eax, DWORD PTR __Block_size$[ebp]
	cmp	eax, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	eax, DWORD PTR __Block_size$[ebp]
	push	eax
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN7@Allocate_m
	jmp	SHORT $LN2@Allocate_m
$LN7@Allocate_m:
	mov	esi, esp
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	121					; 00000079H
	push	OFFSET ??_C@_0GL@KFPMFPIC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	mov	esi, esp
	push	0
	push	121					; 00000079H
	push	OFFSET ??_C@_1NG@FKHEBIAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN2@Allocate_m:
	xor	eax, eax
	jne	SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+ecx], -84215046		; fafafafaH

; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 694  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 695  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 697  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1442 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __77E6CA79_type_traits
	call	@__CheckForDebuggerJustMyCode@4

; 1443 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1444 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __29547EA8_xstddef
	call	@__CheckForDebuggerJustMyCode@4

; 275  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 276  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BM@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -20					; size = 4
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BM@@std@@YAII@Z PROC		; std::_Get_size_of_n<28>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 153391689 ; 09249249H

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 153391689	; 09249249H
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 28
$LN3@Get_size_o:

; 66   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0BM@@std@@YAII@Z ENDP		; std::_Get_size_of_n<28>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 66   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __DE4BE9BA_utility
	call	@__CheckForDebuggerJustMyCode@4

; 67   :     // return smaller of _Left and _Right
; 68   :     return _Right < _Left ? _Right : _Left;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 69   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z
_TEXT	SEGMENT
$T2 = -260						; size = 4
__Backout$3 = -56					; size = 12
__ULast$ = -36						; size = 4
__UFirst$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z PROC ; std::_Uninitialized_move<PoolAllocator *,std::allocator<PoolAllocator> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAVPoolAllocator@@@std@@YA@ABQAVPoolAllocator@@@Z ; std::_Get_unwrapped<PoolAllocator * const &>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAVPoolAllocator@@@std@@YA@ABQAVPoolAllocator@@@Z ; std::_Get_unwrapped<PoolAllocator * const &>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 1691 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1692 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1694 :         return _Dest + (_ULast - _UFirst);
; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	push	12					; 0000000cH
	lea	ecx, DWORD PTR __Backout$3[ebp]
	call	?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$3[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@PAVPoolAllocator@@AAV?$allocator@VPoolAllocator@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Uninitialized_backout_al<std::allocator<PoolAllocator> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	cmp	eax, DWORD PTR __ULast$[ebp]
	je	SHORT $LN3@Uninitiali

; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));

	mov	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$move@AAVPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::move<PoolAllocator &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$3[ebp]
	call	??$_Emplace_back@VPoolAllocator@@@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEX$$QAVPoolAllocator@@@Z ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Emplace_back<PoolAllocator>

; 1699 :         }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1700 : 
; 1701 :         return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$3[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$3[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::~_Uninitialized_backout_al<std::allocator<PoolAllocator> >
	mov	eax, DWORD PTR $T2[ebp]

; 1702 :     }
; 1703 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$3[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<PoolAllocator> >::~_Uninitialized_backout_al<std::allocator<PoolAllocator> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-268]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z ENDP ; std::_Uninitialized_move<PoolAllocator *,std::allocator<PoolAllocator> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 206  :         return _Traits::_Allocate(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 210  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -20					; size = 4
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 60   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
$LN3@Get_size_o:

; 66   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$destroy@VPoolAllocator@@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@@Z
_TEXT	SEGMENT
tv70 = -196						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VPoolAllocator@@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@@Z PROC ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::destroy<PoolAllocator>, COMDAT

; 705  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 706  :         _Ptr->~_Uty();

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv70[ebp], edx
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	DWORD PTR tv70[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp

; 707  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$destroy@VPoolAllocator@@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::destroy<PoolAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __29547EA8_xstddef
	call	@__CheckForDebuggerJustMyCode@4

; 289  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 290  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\type_traits
;	COMDAT ??$forward@V?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z PROC ; std::forward<std::allocator<PoolAllocator> >, COMDAT

; 1442 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __77E6CA79_type_traits
	call	@__CheckForDebuggerJustMyCode@4

; 1443 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1444 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@V?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<PoolAllocator> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1003 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1004 :     // deallocate a plain pointer using an allocator
; 1005 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1006 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1007 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 1008 :     } else {
; 1009 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1010 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1011 :     }
; 1012 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 222  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VPoolAllocator@@@std@@@std@@YAXPAVPoolAllocator@@QAV1@AAV?$allocator@VPoolAllocator@@@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VPoolAllocator@@@std@@@std@@YAXPAVPoolAllocator@@QAV1@AAV?$allocator@VPoolAllocator@@@0@@Z PROC ; std::_Destroy_range<std::allocator<PoolAllocator> >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Destroy_range@V?$allocator@VPoolAllocator@@@std@@@std@@YAXPAVPoolAllocator@@QAV1@AAV?$allocator@VPoolAllocator@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {

	jmp	SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN5@Destroy_ra

; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unfancy@VPoolAllocator@@@std@@YAPAVPoolAllocator@@PAV1@@Z ; std::_Unfancy<PoolAllocator>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@VPoolAllocator@@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@@Z ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::destroy<PoolAllocator>
	add	esp, 8

; 968  :         }

	jmp	SHORT $LN2@Destroy_ra
$LN5@Destroy_ra:

; 969  :     }
; 970  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Destroy_range@V?$allocator@VPoolAllocator@@@std@@@std@@YAXPAVPoolAllocator@@QAV1@AAV?$allocator@VPoolAllocator@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Destroy_range@V?$allocator@VPoolAllocator@@@std@@@std@@YAXPAVPoolAllocator@@QAV1@AAV?$allocator@VPoolAllocator@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Destroy_range@V?$allocator@VPoolAllocator@@@std@@@std@@YAXPAVPoolAllocator@@QAV1@AAV?$allocator@VPoolAllocator@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<PoolAllocator> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@VPoolAllocator@@@std@@@std@@YAXAAV?$allocator@VPoolAllocator@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@VPoolAllocator@@@std@@@std@@YAXAAV?$allocator@VPoolAllocator@@@0@0@Z PROC ; std::_Pocma<std::allocator<PoolAllocator> >, COMDAT

; 908  : void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept { // (maybe) propagate on container move assignment

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 909  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 910  :         _Left = _STD move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$move@AAV?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z ; std::move<std::allocator<PoolAllocator> &>
	add	esp, 4

; 911  :     }
; 912  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pocma@V?$allocator@VPoolAllocator@@@std@@@std@@YAXAAV?$allocator@VPoolAllocator@@@0@0@Z ENDP ; std::_Pocma<std::allocator<PoolAllocator> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<PoolAllocator> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __29547EA8_xstddef
	call	@__CheckForDebuggerJustMyCode@4

; 275  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 276  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\type_traits
;	COMDAT ??$move@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@YA$$QAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@YA$$QAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > &>, COMDAT

; 1454 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __77E6CA79_type_traits
	call	@__CheckForDebuggerJustMyCode@4

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1456 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@YA$$QAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1><>, COMDAT
; _this$ = ecx

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VPoolAllocator@@@std@@QAE@XZ ; std::allocator<PoolAllocator>::allocator<PoolAllocator>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<PoolAllocator> >::_Vector_val<std::_Simple_types<PoolAllocator> >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
__New_proxy$ = -20					; size = 4
_this$ = -8						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1106 :     void _Alloc_proxy(_Alloc&& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1107 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	DWORD PTR __New_proxy$[ebp], eax

; 1108 :         _Construct_in_place(*_New_proxy, this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_proxy$[ebp]
	push	edx
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1109 :         _Myproxy            = _New_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_proxy$[ebp]
	mov	DWORD PTR [eax], ecx

; 1110 :         _New_proxy->_Mycont = this;

	mov	eax, DWORD PTR __New_proxy$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 1111 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$?0V?$allocator@VPoolAllocator@@@std@@$$V@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@VPoolAllocator@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@VPoolAllocator@@@std@@$$V@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@VPoolAllocator@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1><std::allocator<PoolAllocator> >, COMDAT
; _this$ = ecx

; 1344 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z ; std::forward<std::allocator<PoolAllocator> >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<PoolAllocator> >::_Vector_val<std::_Simple_types<PoolAllocator> >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@VPoolAllocator@@@std@@$$V@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@VPoolAllocator@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1><std::allocator<PoolAllocator> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\type_traits
;	COMDAT ??$move@AAV?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z PROC ; std::move<std::allocator<PoolAllocator> &>, COMDAT

; 1454 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __77E6CA79_type_traits
	call	@__CheckForDebuggerJustMyCode@4

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1456 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAV?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z ENDP ; std::move<std::allocator<PoolAllocator> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xstddef
;	COMDAT ??$addressof@V?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YAPAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YAPAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::vector<PoolAllocator,std::allocator<PoolAllocator> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __29547EA8_xstddef
	call	@__CheckForDebuggerJustMyCode@4

; 275  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 276  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@V?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YAPAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::vector<PoolAllocator,std::allocator<PoolAllocator> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1031 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1032 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1033 :     using _Ty = typename _Alloc::value_type;
; 1034 :     _Ptr->~_Ty();
; 1035 :     _Deallocate_plain(_Al, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 1036 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -8						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 596  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __DE4BE9BA_utility
	call	@__CheckForDebuggerJustMyCode@4

; 597  :     // assign _New_val to _Val, return previous _Val
; 598  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 599  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR __New_val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 600  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 601  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$?0VPoolAllocator@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VPoolAllocator@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0VPoolAllocator@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VPoolAllocator@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><PoolAllocator>, COMDAT
; _this$ = ecx

; 806  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0VPoolAllocator@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VPoolAllocator@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><PoolAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 813  :     _NODISCARD __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 815  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z
_TEXT	SEGMENT
tv132 = -360						; size = 4
tv134 = -356						; size = 4
__Constructed_first$ = -156				; size = 4
__Constructed_last$ = -144				; size = 4
__Newvec$ = -132					; size = 4
__Newcapacity$ = -120					; size = 4
__Newsize$ = -108					; size = 4
__Oldsize$ = -96					; size = 4
__Whereoff$ = -84					; size = 4
__Mylast$ = -72						; size = 4
__Myfirst$ = -60					; size = 4
__My_data$ = -48					; size = 4
__Al$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Emplace_reallocate<PoolAllocator>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 344				; 00000158H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 728  :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR __Whereoff$[ebp], eax

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR __Oldsize$[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 738  :             _Xlength();

	call	?_Xlength@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@CAXXZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

	mov	eax, DWORD PTR __Oldsize$[ebp]
	add	eax, 1
	mov	DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEII@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 743  : 
; 744  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@VPoolAllocator@@@std@@QAEPAVPoolAllocator@@I@Z ; std::allocator<PoolAllocator>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	eax, DWORD PTR __Whereoff$[ebp], 28
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	mov	DWORD PTR __Constructed_last$[ebp], edx

; 746  :         pointer _Constructed_first      = _Constructed_last;

	mov	eax, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@VPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::forward<PoolAllocator>
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	imul	ecx, DWORD PTR __Whereoff$[ebp], 28
	add	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	call	??$_Unfancy@VPoolAllocator@@@std@@YAPAVPoolAllocator@@PAV1@@Z ; std::_Unfancy<PoolAllocator>
	add	esp, 4
	mov	DWORD PTR tv132[ebp], eax
	mov	edx, DWORD PTR tv134[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$construct@VPoolAllocator@@V1@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@$$QAV3@@Z ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::construct<PoolAllocator,PoolAllocator>
	add	esp, 12					; 0000000cH

; 750  :         _Constructed_first = _Newvec + _Whereoff;

	imul	eax, DWORD PTR __Whereoff$[ebp], 28
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@00@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove_if_noexcept

; 754  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEPAVPoolAllocator@@PAV3@00@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove

; 756  :             _Constructed_first = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

	imul	eax, DWORD PTR __Whereoff$[ebp], 28
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	push	edx
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Whereptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEPAVPoolAllocator@@PAV3@00@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

	mov	eax, DWORD PTR __Constructed_last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Constructed_first$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@0@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@VPoolAllocator@@@std@@QAEXQAVPoolAllocator@@I@Z ; std::allocator<PoolAllocator>::deallocate

; 762  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 763  :         _CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z$1:

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXQAVPoolAllocator@@II@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Change_array

; 766  :         return _Newvec + _Whereoff;

	imul	eax, DWORD PTR __Whereoff$[ebp], 28
	add	eax, DWORD PTR __Newvec$[ebp]
$LN6@Emplace_re:

; 767  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-364]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Emplace_reallocate<PoolAllocator>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$construct@VPoolAllocator@@V1@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@$$QAV3@@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VPoolAllocator@@V1@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@$$QAV3@@Z PROC ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::construct<PoolAllocator,PoolAllocator>, COMDAT

; 700  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	28					; 0000001cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@VPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::forward<PoolAllocator>
	add	esp, 4
	mov	DWORD PTR tv76[ebp], eax
	mov	edx, DWORD PTR tv76[ebp]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0PoolAllocator@@QAE@$$QAV0@@Z		; PoolAllocator::PoolAllocator

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);
; 702  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@VPoolAllocator@@V1@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@$$QAV3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::construct<PoolAllocator,PoolAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xstddef
;	COMDAT ??$_Unfancy@VPoolAllocator@@@std@@YAPAVPoolAllocator@@PAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@VPoolAllocator@@@std@@YAPAVPoolAllocator@@PAV1@@Z PROC ; std::_Unfancy<PoolAllocator>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __29547EA8_xstddef
	call	@__CheckForDebuggerJustMyCode@4

; 289  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 290  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unfancy@VPoolAllocator@@@std@@YAPAVPoolAllocator@@PAV1@@Z ENDP ; std::_Unfancy<PoolAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAE@$$QAVPoolAllocator@@@Z
_TEXT	SEGMENT
tv77 = -252						; size = 4
tv79 = -248						; size = 4
tv81 = -244						; size = 4
__Result$ = -44						; size = 4
__Mylast$ = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAE@$$QAVPoolAllocator@@@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Emplace_back_with_unused_capacity<PoolAllocator>, COMDAT
; _this$ = ecx

; 682  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 683  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 684  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 686  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@VPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::forward<PoolAllocator>
	add	esp, 4
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Unfancy@VPoolAllocator@@@std@@YAPAVPoolAllocator@@PAV1@@Z ; std::_Unfancy<PoolAllocator>
	add	esp, 4
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	mov	DWORD PTR tv77[ebp], eax
	mov	eax, DWORD PTR tv81[ebp]
	push	eax
	mov	ecx, DWORD PTR tv79[ebp]
	push	ecx
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	call	??$construct@VPoolAllocator@@V1@@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAXAAV?$allocator@VPoolAllocator@@@1@QAVPoolAllocator@@$$QAV3@@Z ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::construct<PoolAllocator,PoolAllocator>
	add	esp, 12					; 0000000cH

; 688  :         _Orphan_range(_Mylast, _Mylast);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEXPAVPoolAllocator@@0@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Orphan_range

; 689  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 690  :         ++_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [edx], ecx

; 691  : #if _HAS_CXX17
; 692  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 693  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 694  :         (void) _Result;
; 695  : #endif // _HAS_CXX17
; 696  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAE@$$QAVPoolAllocator@@@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Emplace_back_with_unused_capacity<PoolAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\type_traits
;	COMDAT ??$forward@VPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z PROC ; std::forward<PoolAllocator>, COMDAT

; 1442 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __77E6CA79_type_traits
	call	@__CheckForDebuggerJustMyCode@4

; 1443 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1444 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@VPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ENDP ; std::forward<PoolAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$emplace_back@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAVPoolAllocator@@@Z
_TEXT	SEGMENT
tv81 = -248						; size = 4
tv83 = -244						; size = 4
__Result$ = -44						; size = 4
__Mylast$ = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAVPoolAllocator@@@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::emplace_back<PoolAllocator>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN2@emplace_ba

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@VPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::forward<PoolAllocator>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAE@$$QAVPoolAllocator@@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Emplace_back_with_unused_capacity<PoolAllocator>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@VPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::forward<PoolAllocator>
	add	esp, 4
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv81[ebp], edx
	mov	eax, DWORD PTR tv83[ebp]
	push	eax
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@QAV2@$$QAV2@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Emplace_reallocate<PoolAllocator>
	mov	DWORD PTR __Result$[ebp], eax

; 709  : #if _HAS_CXX17
; 710  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]
$LN1@emplace_ba:

; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAVPoolAllocator@@@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::emplace_back<PoolAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::~reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::~reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??D?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QBEAAVPoolAllocator@@XZ
_TEXT	SEGMENT
$T1 = -236						; size = 4
__Tmp$ = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
??D?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QBEAAVPoolAllocator@@XZ PROC ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::operator*, COMDAT
; _this$ = ecx

; 1930 :     _NODISCARD _CONSTEXPR17 reference operator*() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __DEE7E6EF_xutility
	call	@__CheckForDebuggerJustMyCode@4

; 1931 :         _BidIt _Tmp = current;

	push	12					; 0000000cH
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	?__autoclassinit2@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@ABV01@@Z

; 1932 :         return *--_Tmp;

	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??F?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator--
	mov	ecx, eax
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QBEAAVPoolAllocator@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator*
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T1[ebp]

; 1933 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@operator:
	DD	1
	DD	$LN5@operator
$LN5@operator:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN4@operator
$LN4@operator:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??D?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QBEAAVPoolAllocator@@XZ ENDP ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 12
??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@1@@Z PROC ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >, COMDAT
; _this$ = ecx

; 1900 :     _CONSTEXPR17 explicit reverse_iterator(_BidIt _Right) noexcept(

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __DEE7E6EF_xutility
	call	@__CheckForDebuggerJustMyCode@4

; 1901 :         is_nothrow_move_constructible_v<_BidIt>) // strengthened
; 1902 :         : current(_STD move(_Right)) {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	lea	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$move@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@YA$$QAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	lea	ecx, DWORD PTR __Right$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@1@@Z ENDP ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@PAVPoolAllocator@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@PAVPoolAllocator@@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@PAVPoolAllocator@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@PAVPoolAllocator@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::__autoclassinit2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _classSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?__autoclassinit2@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??F?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??F?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator--, COMDAT
; _this$ = ecx

; 270  :     _Vector_iterator& operator--() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 271  :         _Mybase::operator--();

	mov	ecx, DWORD PTR _this$[ebp]
	call	??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator--

; 272  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 273  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QBEAAVPoolAllocator@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QBEAAVPoolAllocator@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator*, COMDAT
; _this$ = ecx

; 251  :     _NODISCARD reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 252  :         return const_cast<reference>(_Mybase::operator*());

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QBEABVPoolAllocator@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator*

; 253  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QBEAAVPoolAllocator@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Mycont$ = -20						; size = 4
_this$ = -8						; size = 4
??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator--, COMDAT
; _this$ = ecx

; 85   :     _Vector_const_iterator& operator--() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 86   : #if _ITERATOR_DEBUG_LEVEL != 0
; 87   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 88   :         _STL_VERIFY(_Ptr, "can't decrement value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0DC@DACNKKOM@can?8t?5decrement?5value?9initializ@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	88					; 00000058H
	push	OFFSET ??_C@_0GK@MBAODEDK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	mov	esi, esp
	push	0
	push	88					; 00000058H
	push	OFFSET ??_C@_1NE@CLBIMMMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1OG@KDGBAFAP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GI@IDMAFNCG@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, eax
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 89   :         _STL_VERIFY(_Mycont->_Myfirst < _Ptr, "can't decrement vector iterator before begin");

	mov	eax, DWORD PTR __Mycont$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0CN@CGJJIGFD@can?8t?5decrement?5vector?5iterator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	89					; 00000059H
	push	OFFSET ??_C@_0GK@MBAODEDK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	mov	esi, esp
	push	0
	push	89					; 00000059H
	push	OFFSET ??_C@_1NE@CLBIMMMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1OG@KDGBAFAP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1FO@POFEDLP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, eax
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 90   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 91   : 
; 92   :         --_Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 93   :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 94   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QBEABVPoolAllocator@@XZ
_TEXT	SEGMENT
__Mycont$ = -20						; size = 4
_this$ = -8						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QBEABVPoolAllocator@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator*, COMDAT
; _this$ = ecx

; 46   :     _NODISCARD reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 47   : #if _ITERATOR_DEBUG_LEVEL != 0
; 48   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 49   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	49					; 00000031H
	push	OFFSET ??_C@_0GK@MBAODEDK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	mov	esi, esp
	push	0
	push	49					; 00000031H
	push	OFFSET ??_C@_1NE@CLBIMMMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1OE@LFPKMJDJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, eax
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 50   :         _STL_VERIFY(

	mov	eax, DWORD PTR __Mycont$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN13@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	51					; 00000033H
	push	OFFSET ??_C@_0GK@MBAODEDK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	mov	esi, esp
	push	0
	push	51					; 00000033H
	push	OFFSET ??_C@_1NE@CLBIMMMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1OE@LFPKMJDJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, eax
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 51   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 52   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 53   : 
; 54   :         return *_Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 55   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QBEABVPoolAllocator@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@PAVPoolAllocator@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@PAVPoolAllocator@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >, COMDAT
; _this$ = ecx

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 43   :         this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 44   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@PAVPoolAllocator@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\type_traits
;	COMDAT ??$move@AAVPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAVPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z PROC ; std::move<PoolAllocator &>, COMDAT

; 1454 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __77E6CA79_type_traits
	call	@__CheckForDebuggerJustMyCode@4

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1456 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAVPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ENDP ; std::move<PoolAllocator &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\type_traits
;	COMDAT ??$move@AAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YA$$QAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YA$$QAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z PROC ; std::move<std::vector<PoolAllocator,std::allocator<PoolAllocator> > &>, COMDAT

; 1454 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __77E6CA79_type_traits
	call	@__CheckForDebuggerJustMyCode@4

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1456 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YA$$QAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z ENDP ; std::move<std::vector<PoolAllocator,std::allocator<PoolAllocator> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocatorVector.cpp
;	COMDAT ?deallocate@PoolAllocatorVector@@QAEXABUAllocationInfo@1@@Z
_TEXT	SEGMENT
tv78 = -220						; size = 4
tv80 = -216						; size = 4
tv72 = -212						; size = 4
tv70 = -208						; size = 4
_this$ = -8						; size = 4
_info$ = 8						; size = 4
?deallocate@PoolAllocatorVector@@QAEXABUAllocationInfo@1@@Z PROC ; PoolAllocatorVector::deallocate, COMDAT
; _this$ = ecx

; 64   : void PoolAllocatorVector::deallocate(const AllocationInfo& info) {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __760A61A5_PoolAllocatorVector@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 65   : 	allocators[info.allocatorIndex].deallocate(info.allocationAddress);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR tv70[ebp]
	call	??A?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAVPoolAllocator@@I@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator[]
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR tv80[ebp], edx
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv78[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR tv78[ebp]
	push	edx
	mov	ecx, DWORD PTR tv72[ebp]
	call	DWORD PTR tv80[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp

; 66   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@PoolAllocatorVector@@QAEXABUAllocationInfo@1@@Z ENDP ; PoolAllocatorVector::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocatorVector.cpp
;	COMDAT ?deallocate@PoolAllocatorVector@@QAEXIPAX@Z
_TEXT	SEGMENT
tv76 = -216						; size = 4
tv71 = -212						; size = 4
tv69 = -208						; size = 4
_this$ = -8						; size = 4
_allocatorIndex$ = 8					; size = 4
_address$ = 12						; size = 4
?deallocate@PoolAllocatorVector@@QAEXIPAX@Z PROC	; PoolAllocatorVector::deallocate, COMDAT
; _this$ = ecx

; 60   : void PoolAllocatorVector::deallocate(size_t allocatorIndex, void* address) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __760A61A5_PoolAllocatorVector@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 61   : 	allocators[allocatorIndex].deallocate(address);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR _allocatorIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv69[ebp]
	call	??A?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAVPoolAllocator@@I@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator[]
	mov	DWORD PTR tv71[ebp], eax
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv76[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _address$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv71[ebp]
	call	DWORD PTR tv76[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp

; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@PoolAllocatorVector@@QAEXIPAX@Z ENDP	; PoolAllocatorVector::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocatorVector.cpp
;	COMDAT ?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ
_TEXT	SEGMENT
tv171 = -364						; size = 4
tv130 = -360						; size = 4
tv165 = -356						; size = 4
tv151 = -356						; size = 4
tv145 = -356						; size = 4
tv94 = -356						; size = 4
$T2 = -348						; size = 12
_info$ = -136						; size = 8
_newAllocator$3 = -120					; size = 28
_allocator$4 = -84					; size = 4
_<end>$L0$5 = -72					; size = 4
_<begin>$L0$6 = -60					; size = 4
_<range>$L0$7 = -48					; size = 4
_choosenAllocator$ = -36				; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ PROC ; PoolAllocatorVector::allocate, COMDAT
; _this$ = ecx

; 30   : PoolAllocatorVector::AllocationInfo PoolAllocatorVector::allocate() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __760A61A5_PoolAllocatorVector@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 31   : 	PoolAllocator* choosenAllocator = nullptr;

	mov	DWORD PTR _choosenAllocator$[ebp], 0

; 32   : 
; 33   : 	for (auto& allocator : allocators) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _<range>$L0$7[ebp], eax
	mov	ecx, DWORD PTR _<range>$L0$7[ebp]
	call	?_Unchecked_begin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Unchecked_begin
	mov	DWORD PTR _<begin>$L0$6[ebp], eax
	mov	ecx, DWORD PTR _<range>$L0$7[ebp]
	call	?_Unchecked_end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Unchecked_end
	mov	DWORD PTR _<end>$L0$5[ebp], eax
	jmp	SHORT $LN4@allocate
$LN2@allocate:
	mov	eax, DWORD PTR _<begin>$L0$6[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _<begin>$L0$6[ebp], eax
$LN4@allocate:
	mov	eax, DWORD PTR _<begin>$L0$6[ebp]
	cmp	eax, DWORD PTR _<end>$L0$5[ebp]
	je	$LN3@allocate
	mov	eax, DWORD PTR _<begin>$L0$6[ebp]
	mov	DWORD PTR _allocator$4[ebp], eax

; 34   : 		if (!allocator.isFull()) {

	mov	eax, DWORD PTR _allocator$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _allocator$4[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@allocate

; 35   : 			choosenAllocator = &allocator;

	mov	eax, DWORD PTR _allocator$4[ebp]
	mov	DWORD PTR _choosenAllocator$[ebp], eax

; 36   : 			break;

	jmp	SHORT $LN3@allocate
$LN5@allocate:

; 37   : 		}
; 38   : 
; 39   : 		if (!allocator.isInit()) {

	mov	eax, DWORD PTR _allocator$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _allocator$4[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@allocate

; 40   : 			allocator.init(heap, elementSize, elementsNum);

	mov	eax, DWORD PTR _allocator$4[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv94[ebp], edx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _allocator$4[ebp]
	call	DWORD PTR tv94[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp

; 41   : 			choosenAllocator = &allocator;

	mov	eax, DWORD PTR _allocator$4[ebp]
	mov	DWORD PTR _choosenAllocator$[ebp], eax

; 42   : 			break;

	jmp	SHORT $LN3@allocate
$LN6@allocate:

; 43   : 		}
; 44   : 	}

	jmp	$LN2@allocate
$LN3@allocate:

; 45   : 
; 46   : 	if (choosenAllocator == nullptr) {

	cmp	DWORD PTR _choosenAllocator$[ebp], 0
	jne	$LN7@allocate

; 47   : 		PoolAllocator newAllocator;

	push	28					; 0000001cH
	lea	ecx, DWORD PTR _newAllocator$3[ebp]
	call	?__autoclassinit2@PoolAllocator@@QAEXI@Z
	lea	ecx, DWORD PTR _newAllocator$3[ebp]
	call	??0PoolAllocator@@QAE@XZ		; PoolAllocator::PoolAllocator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 48   : 		newAllocator.init(heap, elementSize, elementsNum);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	lea	ecx, DWORD PTR _newAllocator$3[ebp]
	call	?init@PoolAllocator@@UAE_NPAVHeap@@II@Z	; PoolAllocator::init

; 49   : 		allocators.push_back(std::move(newAllocator));

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], eax
	lea	ecx, DWORD PTR _newAllocator$3[ebp]
	push	ecx
	call	??$move@AAVPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::move<PoolAllocator &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv145[ebp]
	call	?push_back@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEX$$QAVPoolAllocator@@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::push_back

; 50   : 		choosenAllocator = &(*allocators.rbegin());

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv151[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv151[ebp]
	call	?rbegin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::rbegin
	mov	DWORD PTR tv130[ebp], eax
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR tv171[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv171[ebp]
	call	??D?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QBEAAVPoolAllocator@@XZ ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::operator*
	mov	DWORD PTR _choosenAllocator$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@XZ

; 51   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _newAllocator$3[ebp]
	call	??1PoolAllocator@@UAE@XZ		; PoolAllocator::~PoolAllocator
$LN7@allocate:

; 52   : 
; 53   : 	AllocationInfo info;
; 54   : 	info.allocationAddress = choosenAllocator->allocate();

	mov	eax, DWORD PTR _choosenAllocator$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _choosenAllocator$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _info$[ebp], eax

; 55   : 	info.allocatorIndex = choosenAllocator - &allocators[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv165[ebp], eax
	push	0
	mov	ecx, DWORD PTR tv165[ebp]
	call	??A?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAVPoolAllocator@@I@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator[]
	mov	ecx, DWORD PTR _choosenAllocator$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR _info$[ebp+4], eax

; 56   : 
; 57   : 	return info;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR _info$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 58   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@allocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN15@allocate:
	DD	2
	DD	$LN14@allocate
$LN14@allocate:
	DD	-120					; ffffff88H
	DD	28					; 0000001cH
	DD	$LN11@allocate
	DD	-136					; ffffff78H
	DD	8
	DD	$LN12@allocate
$LN12@allocate:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN11@allocate:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ$0:
	lea	ecx, DWORD PTR _newAllocator$3[ebp]
	jmp	??1PoolAllocator@@UAE@XZ		; PoolAllocator::~PoolAllocator
__unwindfunclet$?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-368]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?allocate@PoolAllocatorVector@@QAE?AUAllocationInfo@1@XZ ENDP ; PoolAllocatorVector::allocate
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocatorVector.cpp
;	COMDAT ?release@PoolAllocatorVector@@QAEXXZ
_TEXT	SEGMENT
tv85 = -280						; size = 4
$T1 = -272						; size = 16
_allocator$2 = -56					; size = 4
_<end>$L0$3 = -44					; size = 4
_<begin>$L0$4 = -32					; size = 4
_<range>$L0$5 = -20					; size = 4
_this$ = -8						; size = 4
?release@PoolAllocatorVector@@QAEXXZ PROC		; PoolAllocatorVector::release, COMDAT
; _this$ = ecx

; 19   : void PoolAllocatorVector::release() {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __760A61A5_PoolAllocatorVector@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 20   :     elementSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 21   :     elementsNum = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 22   : 
; 23   :     for (auto& allocator : allocators) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _<range>$L0$5[ebp], eax
	mov	ecx, DWORD PTR _<range>$L0$5[ebp]
	call	?_Unchecked_begin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Unchecked_begin
	mov	DWORD PTR _<begin>$L0$4[ebp], eax
	mov	ecx, DWORD PTR _<range>$L0$5[ebp]
	call	?_Unchecked_end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Unchecked_end
	mov	DWORD PTR _<end>$L0$3[ebp], eax
	jmp	SHORT $LN4@release
$LN2@release:
	mov	eax, DWORD PTR _<begin>$L0$4[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _<begin>$L0$4[ebp], eax
$LN4@release:
	mov	eax, DWORD PTR _<begin>$L0$4[ebp]
	cmp	eax, DWORD PTR _<end>$L0$3[ebp]
	je	SHORT $LN3@release
	mov	eax, DWORD PTR _<begin>$L0$4[ebp]
	mov	DWORD PTR _allocator$2[ebp], eax

; 24   :         allocator.release();

	mov	eax, DWORD PTR _allocator$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _allocator$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 25   :     }

	jmp	SHORT $LN2@release
$LN3@release:

; 26   : 
; 27   :     allocators = std::vector<PoolAllocator>();

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::vector<PoolAllocator,std::allocator<PoolAllocator> >
	mov	DWORD PTR tv85[ebp], eax
	mov	eax, DWORD PTR tv85[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator=
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::~vector<PoolAllocator,std::allocator<PoolAllocator> >

; 28   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?release@PoolAllocatorVector@@QAEXXZ ENDP		; PoolAllocatorVector::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocatorVector.cpp
;	COMDAT ??4PoolAllocatorVector@@QAEAAV0@$$QAV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vector$ = 8						; size = 4
??4PoolAllocatorVector@@QAEAAV0@$$QAV0@@Z PROC		; PoolAllocatorVector::operator=, COMDAT
; _this$ = ecx

; 6    : PoolAllocatorVector& PoolAllocatorVector::operator=(PoolAllocatorVector&& vector) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __760A61A5_PoolAllocatorVector@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 7    :     allocators = std::move(vector.allocators);

	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	call	??$move@AAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YA$$QAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z ; std::move<std::vector<PoolAllocator,std::allocator<PoolAllocator> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator=

; 8    : 
; 9    : 	heap = vector.heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 10   :     elementSize = vector.elementSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 11   :     elementsNum = vector.elementsNum;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 12   : 
; 13   :     vector.elementSize = 0;

	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+20], 0

; 14   :     vector.elementsNum = 0;

	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+24], 0

; 15   : 
; 16   :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 17   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4PoolAllocatorVector@@QAEAAV0@$$QAV0@@Z ENDP		; PoolAllocatorVector::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocatorVector.cpp
;	COMDAT ??0PoolAllocatorVector@@QAE@$$QAV0@@Z
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
_vector$ = 8						; size = 4
??0PoolAllocatorVector@@QAE@$$QAV0@@Z PROC		; PoolAllocatorVector::PoolAllocatorVector, COMDAT
; _this$ = ecx

; 4    : 	: allocators(std::move(vector.allocators)), heap(vector.heap), elementSize(vector.elementSize), elementsNum(vector.elementsNum) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __760A61A5_PoolAllocatorVector@cpp
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _vector$[ebp]
	push	ecx
	call	??$move@AAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YA$$QAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z ; std::move<std::vector<PoolAllocator,std::allocator<PoolAllocator> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	call	??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::vector<PoolAllocator,std::allocator<PoolAllocator> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0PoolAllocatorVector@@QAE@$$QAV0@@Z ENDP		; PoolAllocatorVector::PoolAllocatorVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QBEABV?$allocator@VPoolAllocator@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QBEABV?$allocator@VPoolAllocator@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1350 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1351 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1352 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QBEABV?$allocator@VPoolAllocator@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAEAAV?$allocator@VPoolAllocator@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAEAAV?$allocator@VPoolAllocator@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1346 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1347 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1348 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAEAAV?$allocator@VPoolAllocator@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Take_contents@?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_val<std::_Simple_types<PoolAllocator> >::_Take_contents, COMDAT
; _this$ = ecx

; 384  :     void _Take_contents(_Vector_val& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 385  :         this->_Swap_proxy_and_iterators(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 386  :         _Myfirst = _Right._Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 387  :         _Mylast  = _Right._Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 388  :         _Myend   = _Right._Myend;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 389  : 
; 390  :         _Right._Myfirst = pointer();

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax+4], 0

; 391  :         _Right._Mylast  = pointer();

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax+8], 0

; 392  :         _Right._Myend   = pointer();

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax+12], 0

; 393  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Take_contents@?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_val<std::_Simple_types<PoolAllocator> >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<PoolAllocator> >::_Vector_val<std::_Simple_types<PoolAllocator> >, COMDAT
; _this$ = ecx

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<PoolAllocator> >::_Vector_val<std::_Simple_types<PoolAllocator> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEABV?$allocator@VPoolAllocator@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEABV?$allocator@VPoolAllocator@@@2@XZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal, COMDAT
; _this$ = ecx

; 1736 :     const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1737 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QBEABV?$allocator@VPoolAllocator@@@2@XZ ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Get_first

; 1738 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEABV?$allocator@VPoolAllocator@@@2@XZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal, COMDAT
; _this$ = ecx

; 1732 :     _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1733 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Get_first

; 1734 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Orphan_range@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEXPAVPoolAllocator@@0@Z
_TEXT	SEGMENT
__Pnextptr$1 = -48					; size = 4
__Pnext$ = -36						; size = 4
__Lock$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEXPAVPoolAllocator@@0@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1712 :     void _Orphan_range(pointer _First, pointer _Last) const { // orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1713 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1714 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1715 : 
; 1716 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 1717 :         while (*_Pnext) {

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_ran

; 1718 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$1[ebp], edx

; 1719 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	eax, DWORD PTR __Pnextptr$1[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN6@Orphan_ran
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __Pnextptr$1[ebp]
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1720 :                 _Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1721 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1722 :                 (*_Pnext)->_Myproxy = nullptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0

; 1723 :                 *_Pnext             = (*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN5@Orphan_ran:

; 1724 :             }
; 1725 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 1726 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1727 :         (void) _First;
; 1728 :         (void) _Last;
; 1729 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1730 :     }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@Orphan_ran:
	DD	1
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@Orphan_ran
$LN9@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_range@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEXPAVPoolAllocator@@0@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@CAXXZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1705 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlength@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@CAXXZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
tv86 = -276						; size = 4
tv88 = -272						; size = 4
tv90 = -268						; size = 4
__Myend$ = -68						; size = 4
__Mylast$ = -56						; size = 4
__Myfirst$ = -44					; size = 4
__My_data$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXXZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1687 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@0@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Destroy

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	mov	DWORD PTR tv90[ebp], eax
	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR tv88[ebp], eax
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR tv88[ebp]
	push	ecx
	mov	edx, DWORD PTR tv86[ebp]
	push	edx
	mov	ecx, DWORD PTR tv90[ebp]
	call	?deallocate@?$allocator@VPoolAllocator@@@std@@QAEXQAVPoolAllocator@@I@Z ; std::allocator<PoolAllocator>::deallocate

; 1697 : 
; 1698 :             _Myfirst = pointer();

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-280]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXXZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Tidy
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXQAVPoolAllocator@@II@Z
_TEXT	SEGMENT
tv86 = -264						; size = 4
tv88 = -260						; size = 4
tv90 = -256						; size = 4
__Myend$ = -56						; size = 4
__Mylast$ = -44						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXQAVPoolAllocator@@II@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@0@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Destroy

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	mov	DWORD PTR tv90[ebp], eax
	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR tv88[ebp], eax
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR tv88[ebp]
	push	ecx
	mov	edx, DWORD PTR tv86[ebp]
	push	edx
	mov	ecx, DWORD PTR tv90[ebp]
	call	?deallocate@?$allocator@VPoolAllocator@@@std@@QAEXQAVPoolAllocator@@I@Z ; std::allocator<PoolAllocator>::deallocate
$LN2@Change_arr:

; 1679 :         }
; 1680 : 
; 1681 :         _Myfirst = _Newvec;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

	imul	eax, DWORD PTR __Newsize$[ebp], 28
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

	imul	eax, DWORD PTR __Newcapacity$[ebp], 28
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [ecx], eax

; 1684 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXQAVPoolAllocator@@II@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -44					; size = 4
__Max$ = -32						; size = 4
__Oldcapacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEII@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1618 :         const auto _Max              = max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::max_size
	mov	DWORD PTR __Max$[ebp], eax

; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR __Max$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR __Oldcapacity$[ebp], ecx
	jbe	SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEII@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@0@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1612 :         _Destroy_range(_First, _Last, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@VPoolAllocator@@@std@@@std@@YAXPAVPoolAllocator@@QAV1@AAV?$allocator@VPoolAllocator@@@0@@Z ; std::_Destroy_range<std::allocator<PoolAllocator> >
	add	esp, 12					; 0000000cH

; 1613 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@0@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@00@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@00@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1605 :     void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1606 :         // move_if_noexcept [_First, _Last) to raw _Dest, using allocator
; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@00U?$integral_constant@_N$00@2@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove_if_noexcept1

; 1608 :             bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1609 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@00@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1595 :     void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1596 :         // move [_First, _Last) to raw _Dest, using allocator
; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z ; std::_Uninitialized_move<PoolAllocator *,std::allocator<PoolAllocator> >
	add	esp, 16					; 00000010H

; 1598 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXPAVPoolAllocator@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Umove@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEPAVPoolAllocator@@PAV3@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEPAVPoolAllocator@@PAV3@00@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove, COMDAT
; _this$ = ecx

; 1591 :     pointer _Umove(pointer _First, pointer _Last, pointer _Dest) { // move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAVPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@YAPAVPoolAllocator@@QAV1@0PAV1@AAV?$allocator@VPoolAllocator@@@0@@Z ; std::_Uninitialized_move<PoolAllocator *,std::allocator<PoolAllocator> >
	add	esp, 16					; 00000010H

; 1593 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEPAVPoolAllocator@@PAV3@00@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??A?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAVPoolAllocator@@I@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAVPoolAllocator@@I@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator[], COMDAT
; _this$ = ecx

; 1497 :     _NODISCARD _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1498 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1501					; 000005ddH
	push	OFFSET ??_C@_0GK@MBAODEDK@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	mov	esi, esp
	push	0
	push	1501					; 000005ddH
	push	OFFSET ??_C@_1NE@CLBIMMMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1LC@IMILFHJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, eax
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

	imul	eax, DWORD PTR __Pos$[ebp], 28
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	eax, DWORD PTR [ecx+4]

; 1505 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAVPoolAllocator@@I@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?capacity@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?capacity@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::capacity, COMDAT
; _this$ = ecx

; 1492 :     _NODISCARD size_type capacity() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1493 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx

; 1495 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?max_size@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
?max_size@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::max_size, COMDAT
; _this$ = ecx

; 1487 :     _NODISCARD size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1488 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@ABEABV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAIABV?$allocator@VPoolAllocator@@@2@@Z ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1489 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1490 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QBEIXZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Unchecked_end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Unchecked_end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1469 :     pointer _Unchecked_end() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1470 :         return _Mypair._Myval2._Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 1471 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked_end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Unchecked_begin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1461 :     pointer _Unchecked_begin() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1462 :         return _Mypair._Myval2._Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1463 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unchecked_begin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEPAVPoolAllocator@@XZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?rbegin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?rbegin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@2@XZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::rbegin, COMDAT
; _this$ = ecx

; 1429 :     _NODISCARD reverse_iterator rbegin() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1430 :         return reverse_iterator(end());

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T1[ebp], esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::end
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@1@@Z ; std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PoolAllocator> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1431 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?rbegin@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@@2@XZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::rbegin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
tv78 = -224						; size = 4
tv80 = -220						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@2@XZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::end, COMDAT
; _this$ = ecx

; 1419 :     _NODISCARD iterator end() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 1420 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<PoolAllocator> > >
	add	esp, 4
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv78[ebp], edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR tv78[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@std@@QAE@PAVPoolAllocator@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1422 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@@2@XZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?push_back@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEX$$QAVPoolAllocator@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEX$$QAVPoolAllocator@@@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::push_back, COMDAT
; _this$ = ecx

; 720  :     void push_back(_Ty&& _Val) { // insert by moving into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 721  :         emplace_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAVPoolAllocator@@@std@@YA$$QAVPoolAllocator@@AAV1@@Z ; std::move<PoolAllocator &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@VPoolAllocator@@@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAVPoolAllocator@@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::emplace_back<PoolAllocator>

; 722  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEX$$QAVPoolAllocator@@@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??1?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -240						; size = 4
_$S1$ = -33						; size = 1
__Alproxy$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
??1?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::~vector<PoolAllocator,std::allocator<PoolAllocator> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 673  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXXZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Tidy

; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S1$[ebp]
	call	??$?0VPoolAllocator@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VPoolAllocator@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><PoolAllocator>
	lea	eax, DWORD PTR _$S1$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@vector
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@vector:
	DD	1
	DD	$LN4@vector
$LN4@vector:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN3@vector
$LN3@vector:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	0
??1?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::~vector<PoolAllocator,std::allocator<PoolAllocator> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??4?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator=, COMDAT
; _this$ = ecx

; 664  :     vector& operator=(vector&& _Right) noexcept(noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 665  :         if (this != _STD addressof(_Right)) {

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$addressof@V?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@@std@@YAPAV?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@0@AAV10@@Z ; std::addressof<std::vector<PoolAllocator,std::allocator<PoolAllocator> > >
	add	esp, 4
	cmp	DWORD PTR _this$[ebp], eax
	je	SHORT $LN2@operator

; 666  :             _Move_assign(_Right, _Choose_pocma<_Alty>{});

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Move_assign@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Move_assign
$LN2@operator:

; 667  :         }
; 668  : 
; 669  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 670  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Move_assign@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXAAV12@U_Equal_allocators@2@@Z
_TEXT	SEGMENT
tv72 = -212						; size = 4
tv82 = -208						; size = 4
tv74 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_assign@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXAAV12@U_Equal_allocators@2@@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Move_assign, COMDAT
; _this$ = ecx

; 595  :     void _Move_assign(vector& _Right, _Equal_allocators) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 596  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXXZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Tidy

; 597  :         _Pocma(_Getal(), _Right._Getal());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	call	??$_Pocma@V?$allocator@VPoolAllocator@@@std@@@std@@YAXAAV?$allocator@VPoolAllocator@@@0@0@Z ; std::_Pocma<std::allocator<PoolAllocator> >
	add	esp, 8

; 598  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv82[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv82[ebp]
	call	?_Take_contents@?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<PoolAllocator> >::_Take_contents

; 599  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Move_assign@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Move_assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
tv75 = -272						; size = 4
tv91 = -268						; size = 4
tv77 = -268						; size = 4
$T2 = -257						; size = 1
$T3 = -245						; size = 1
$T4 = -233						; size = 1
$T5 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::vector<PoolAllocator,std::allocator<PoolAllocator> >, COMDAT
; _this$ = ecx

; 581  :     vector(vector&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	push	eax
	call	??$move@AAV?$allocator@VPoolAllocator@@@std@@@std@@YA$$QAV?$allocator@VPoolAllocator@@@0@AAV10@@Z ; std::move<std::allocator<PoolAllocator> &>
	add	esp, 4
	mov	DWORD PTR tv75[ebp], eax
	mov	cl, BYTE PTR $T5[ebp]
	mov	BYTE PTR $T4[ebp], cl
	mov	edx, DWORD PTR tv75[ebp]
	push	edx
	movzx	eax, BYTE PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR tv77[ebp]
	call	??$?0V?$allocator@VPoolAllocator@@@std@@$$V@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@VPoolAllocator@@@1@@Z ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1><std::allocator<PoolAllocator> >

; 582  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??$?0VPoolAllocator@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VPoolAllocator@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><PoolAllocator>
	push	eax
	mov	ecx, DWORD PTR tv91[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 583  :         _Move_construct(_Right, true_type{});

	xor	eax, eax
	mov	BYTE PTR $T2[ebp], al
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Move_construct@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Move_construct

; 584  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAV01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-276]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::vector<PoolAllocator,std::allocator<PoolAllocator> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Move_construct@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_construct@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Move_construct, COMDAT
; _this$ = ecx

; 556  :     void _Move_construct(vector& _Right, true_type) noexcept { // move from _Right, stealing its contents

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4

; 557  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv71[ebp]
	call	?_Take_contents@?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<PoolAllocator> >::_Take_contents

; 558  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Move_construct@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Move_construct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv83 = -244						; size = 4
tv69 = -244						; size = 4
$T2 = -233						; size = 1
$T3 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ PROC ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::vector<PoolAllocator,std::allocator<PoolAllocator> >, COMDAT
; _this$ = ecx

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __E9D2A317_vector
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	movzx	ecx, BYTE PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv69[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@VPoolAllocator@@@std@@V?$_Vector_val@U?$_Simple_types@VPoolAllocator@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1>::_Compressed_pair<std::allocator<PoolAllocator>,std::_Vector_val<std::_Simple_types<PoolAllocator> >,1><>

; 446  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@AAEAAV?$allocator@VPoolAllocator@@@2@XZ ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0VPoolAllocator@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VPoolAllocator@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><PoolAllocator>
	push	eax
	mov	ecx, DWORD PTR tv83[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 447  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VPoolAllocator@@V?$allocator@VPoolAllocator@@@std@@@std@@QAE@XZ ENDP ; std::vector<PoolAllocator,std::allocator<PoolAllocator> >::vector<PoolAllocator,std::allocator<PoolAllocator> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAIABV?$allocator@VPoolAllocator@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAIABV?$allocator@VPoolAllocator@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::max_size, COMDAT

; 709  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 153391689				; 09249249H

; 711  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@VPoolAllocator@@@std@@@std@@SAIABV?$allocator@VPoolAllocator@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<PoolAllocator> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?allocate@?$allocator@VPoolAllocator@@@std@@QAEPAVPoolAllocator@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VPoolAllocator@@@std@@QAEPAVPoolAllocator@@I@Z PROC ; std::allocator<PoolAllocator>::allocate, COMDAT
; _this$ = ecx

; 813  :     _NODISCARD __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0BM@@std@@YAII@Z	; std::_Get_size_of_n<28>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 815  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VPoolAllocator@@@std@@QAEPAVPoolAllocator@@I@Z ENDP ; std::allocator<PoolAllocator>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@VPoolAllocator@@@std@@QAEXQAVPoolAllocator@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@VPoolAllocator@@@std@@QAEXQAVPoolAllocator@@I@Z PROC ; std::allocator<PoolAllocator>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 28
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 811  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VPoolAllocator@@@std@@QAEXQAVPoolAllocator@@I@Z ENDP ; std::allocator<PoolAllocator>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??0?$allocator@VPoolAllocator@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@VPoolAllocator@@@std@@QAE@XZ PROC	; std::allocator<PoolAllocator>::allocator<PoolAllocator>, COMDAT
; _this$ = ecx

; 802  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VPoolAllocator@@@std@@QAE@XZ ENDP	; std::allocator<PoolAllocator>::allocator<PoolAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
tv78 = -208						; size = 4
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv78[ebp], edx
	mov	eax, DWORD PTR tv78[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))
; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -20						; size = 4
_this$ = -8						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 1189 :     void _Orphan_me() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1190 :         if (_Myproxy) { // adopted, remove self from list

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN13@Orphan_me

; 1191 :             _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx
$LN2@Orphan_me:

; 1192 :             while (*_Pnext && *_Pnext != this) {

	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_me
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN6@Orphan_me

; 1193 :                 _Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx

; 1194 :             }

	jmp	SHORT $LN2@Orphan_me
$LN6@Orphan_me:

; 1195 : 
; 1196 :             _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN9@Orphan_me
	jmp	SHORT $LN4@Orphan_me
$LN9@Orphan_me:
	mov	esi, esp
	push	OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1196					; 000004acH
	push	OFFSET ??_C@_0GL@KFPMFPIC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN14@Orphan_me
	int	3
$LN14@Orphan_me:
	mov	esi, esp
	push	0
	push	1196					; 000004acH
	push	OFFSET ??_C@_1NG@FKHEBIAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, eax
	jne	SHORT $LN9@Orphan_me
$LN4@Orphan_me:
	xor	eax, eax
	jne	SHORT $LN6@Orphan_me

; 1197 :             *_Pnext  = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1198 :             _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN13@Orphan_me:

; 1199 :         }
; 1200 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 1184 :     const _Container_base12* _Getcont() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1185 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 1186 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$1 = -48						; size = 4
__Lock$2 = -36						; size = 4
__Parent_proxy$3 = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 1156 :     void _Adopt(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1157 :         if (_Parent) {

	cmp	DWORD PTR __Parent$[ebp], 0
	je	SHORT $LN2@Adopt

; 1158 :             // have a parent, do adoption
; 1159 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$3[ebp], ecx

; 1160 : 
; 1161 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1162 :             if (_Myproxy != _Parent_proxy) { // change parentage

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Parent_proxy$3[ebp]
	je	SHORT $LN4@Adopt

; 1163 :                 _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1164 :                 _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1165 :                 _Mynextiter                 = _Parent_proxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 1166 :                 _Parent_proxy->_Myfirstiter = this;

	mov	eax, DWORD PTR __Parent_proxy$3[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1167 :                 _Myproxy                    = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	DWORD PTR [eax], ecx

; 1168 :             }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@Adopt:

; 1169 : 
; 1170 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1171 :             _Myproxy = _Parent_proxy;
; 1172 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1173 :         } else {

	jmp	SHORT $LN5@Adopt
$LN2@Adopt:

; 1174 :             // no future parent, just disown current parent
; 1175 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1176 :             _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$1[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1177 :             _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1178 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1179 :             _Myproxy = nullptr;
; 1180 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1181 :         }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$1[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@Adopt:

; 1182 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN9@Adopt:
	DD	2
	DD	$LN8@Adopt
$LN8@Adopt:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN6@Adopt
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN7@Adopt
$LN7@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 1149 :     ~_Iterator_base12() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1150 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1151 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1152 :         _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1153 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1154 :     }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Iterator_b:
	DD	1
	DD	$LN4@Iterator_b
$LN4@Iterator_b:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@Iterator_b
$LN3@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$1 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 1132 :     _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1133 :         if (_Myproxy != _Right._Myproxy) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@operator

; 1134 :             if (_Right._Myproxy) {

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator

; 1135 :                 _Adopt(_Right._Myproxy->_Mycont);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 1136 :             } else { // becoming invalid, disown current parent

	jmp	SHORT $LN2@operator
$LN3@operator:

; 1137 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 :                 _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$1[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1139 :                 _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1140 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1141 :                 _Myproxy = nullptr;
; 1142 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1143 :             }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$1[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:

; 1144 :         }
; 1145 : 
; 1146 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1147 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN8@operator:
	DD	1
	DD	$LN7@operator
$LN7@operator:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@operator
$LN6@operator:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1128 :     _Iterator_base12(const _Iterator_base12& _Right) noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1129 :         *this = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 1130 :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1126 :     _Iterator_base12() noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {} // construct orphaned iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -36						; size = 4
__Lock$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 1224 : inline void _Container_base12::_Swap_proxy_and_iterators(_Container_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1225 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1226 :     _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1227 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1228 : 
; 1229 :     _Container_proxy* _Temp = _Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$[ebp], ecx

; 1230 :     _Myproxy                = _Right._Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1231 :     _Right._Myproxy         = _Temp;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Temp$[ebp]
	mov	DWORD PTR [eax], ecx

; 1232 : 
; 1233 :     if (_Myproxy) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Swap_proxy

; 1234 :         _Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@Swap_proxy:

; 1235 :     }
; 1236 : 
; 1237 :     if (_Right._Myproxy) {

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Swap_proxy

; 1238 :         _Right._Myproxy->_Mycont = &_Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@Swap_proxy:

; 1239 :     }
; 1240 : }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Swap_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN7@Swap_proxy:
	DD	1
	DD	$LN6@Swap_proxy
$LN6@Swap_proxy:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@Swap_proxy
$LN5@Swap_proxy:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -36						; size = 4
__Lock$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1210 : inline void _Container_base12::_Orphan_all() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 1211 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1212 :     if (_Myproxy) { // proxy allocated, drain it

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_all

; 1213 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1214 : 
; 1215 :         for (auto _Pnext = &_Myproxy->_Myfirstiter; *_Pnext; *_Pnext = (*_Pnext)->_Mynextiter) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$1[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN4@Orphan_all:
	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_all

; 1216 :             (*_Pnext)->_Myproxy = nullptr;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0

; 1217 :         }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1218 : 
; 1219 :         _Myproxy->_Myfirstiter = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], 0

; 1220 :     }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@Orphan_all:

; 1221 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1222 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@Orphan_all:
	DD	1
	DD	$LN8@Orphan_all
$LN8@Orphan_all:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@Orphan_all
$LN7@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1097 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1089 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -44					; size = 4
__Min_back_shift$ = -32					; size = 4
__Ptr_container$ = -20					; size = 4
__Ptr_user$ = -8					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Adjust_man:

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN7@Adjust_man
	jmp	SHORT $LN2@Adjust_man
$LN7@Adjust_man:
	mov	esi, esp
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0GL@KFPMFPIC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1NG@FKHEBIAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN2@Adjust_man:
	xor	eax, eax
	jne	SHORT $LN4@Adjust_man

; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN13@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN13@Adjust_man
	jmp	SHORT $LN8@Adjust_man
$LN13@Adjust_man:
	mov	esi, esp
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
	add	eax, 19					; 00000013H
	push	eax
	push	OFFSET ??_C@_0GL@KFPMFPIC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
	add	eax, 19					; 00000013H
	push	eax
	push	OFFSET ??_C@_1NG@FKHEBIAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN8@Adjust_man:
	xor	eax, eax
	jne	SHORT $LN10@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax], ecx

; 153  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 76   :     __declspec(allocator) static void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B4DE8A79_xmemory
	call	@__CheckForDebuggerJustMyCode@4

; 77   :         return ::operator new(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 78   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -208						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8655F6A9_exception
	call	@__CheckForDebuggerJustMyCode@4

; 321  :     _THROW(bad_array_new_length{});

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0bad_array_new_length@std@@QAE@XZ	; std::bad_array_new_length::bad_array_new_length
	push	OFFSET __TI3?AVbad_array_new_length@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_array_new_length@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __604808BE_vcruntime_exception@h
	call	@__CheckForDebuggerJustMyCode@4

; 140  :         : bad_alloc("bad array new length")

	push	OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@AAE@QBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __604808BE_vcruntime_exception@h
	call	@__CheckForDebuggerJustMyCode@4

; 129  :         : exception(_Message, 1)

	push	1
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBDH@Z		; std::exception::exception

; 130  :     {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __604808BE_vcruntime_exception@h
	call	@__CheckForDebuggerJustMyCode@4

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@what
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@what
$LN3@what:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
	mov	eax, DWORD PTR tv69[ebp]

; 96   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __604808BE_vcruntime_exception@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	___std_exception_destroy
	add	esp, 4

; 91   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __604808BE_vcruntime_exception@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Other$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_copy
	add	esp, 8

; 74   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __604808BE_vcruntime_exception@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Message$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 68   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 556  :     _NODISCARD static constexpr int(max)() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A47FD3F7_limits
	call	@__CheckForDebuggerJustMyCode@4

; 557  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 558  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 167  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8B404B8B_vcruntime_new@h
	call	@__CheckForDebuggerJustMyCode@4

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 170  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GPoolAllocator@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GPoolAllocator@@UAEPAXI@Z PROC			; PoolAllocator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PoolAllocator@@UAE@XZ		; PoolAllocator::~PoolAllocator
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPoolAllocator@@UAEPAXI@Z ENDP			; PoolAllocator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@PoolAllocator@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@PoolAllocator@@QAEXI@Z PROC		; PoolAllocator::__autoclassinit2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _classSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?__autoclassinit2@PoolAllocator@@QAEXI@Z ENDP		; PoolAllocator::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?isInit@PoolAllocator@@UBE_NXZ
_TEXT	SEGMENT
tv66 = -205						; size = 1
_this$ = -8						; size = 4
?isInit@PoolAllocator@@UBE_NXZ PROC			; PoolAllocator::isInit, COMDAT
; _this$ = ecx

; 47   : 	virtual bool isInit() const { return buckets; }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@isInit
	mov	BYTE PTR tv66[ebp], 1
	jmp	SHORT $LN4@isInit
$LN3@isInit:
	mov	BYTE PTR tv66[ebp], 0
$LN4@isInit:
	mov	al, BYTE PTR tv66[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isInit@PoolAllocator@@UBE_NXZ ENDP			; PoolAllocator::isInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?isFull@PoolAllocator@@UBE_NXZ
_TEXT	SEGMENT
tv67 = -208						; size = 4
_this$ = -8						; size = 4
?isFull@PoolAllocator@@UBE_NXZ PROC			; PoolAllocator::isFull, COMDAT
; _this$ = ecx

; 46   : 	virtual bool isFull() const { return usingBucketsNum == bucketsNum; }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+24]
	jne	SHORT $LN3@isFull
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@isFull
$LN3@isFull:
	mov	DWORD PTR tv67[ebp], 0
$LN4@isFull:
	mov	al, BYTE PTR tv67[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isFull@PoolAllocator@@UBE_NXZ ENDP			; PoolAllocator::isFull
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?getBucketsNum@PoolAllocator@@UBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getBucketsNum@PoolAllocator@@UBEIXZ PROC		; PoolAllocator::getBucketsNum, COMDAT
; _this$ = ecx

; 44   : 	virtual size_t getBucketsNum() const { return bucketsNum; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getBucketsNum@PoolAllocator@@UBEIXZ ENDP		; PoolAllocator::getBucketsNum
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?getBucketSize@PoolAllocator@@UBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getBucketSize@PoolAllocator@@UBEIXZ PROC		; PoolAllocator::getBucketSize, COMDAT
; _this$ = ecx

; 43   : 	virtual size_t getBucketSize() const { return bucketSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getBucketSize@PoolAllocator@@UBEIXZ ENDP		; PoolAllocator::getBucketSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?size@PoolAllocator@@UBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@PoolAllocator@@UBEIXZ PROC			; PoolAllocator::size, COMDAT
; _this$ = ecx

; 41   : 	virtual size_t size() const { return usingBucketsNum; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@PoolAllocator@@UBEIXZ ENDP			; PoolAllocator::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ?getHeap@PoolAllocator@@UAEPAVHeap@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getHeap@PoolAllocator@@UAEPAVHeap@@XZ PROC		; PoolAllocator::getHeap, COMDAT
; _this$ = ecx

; 39   : 	virtual Heap* getHeap() { return heap; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getHeap@PoolAllocator@@UAEPAVHeap@@XZ ENDP		; PoolAllocator::getHeap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\MemoryManager\Allocators\PoolAllocator.h
;	COMDAT ??1PoolAllocator@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1PoolAllocator@@UAE@XZ PROC				; PoolAllocator::~PoolAllocator, COMDAT
; _this$ = ecx

; 26   : 	virtual ~PoolAllocator() { PoolAllocator::release(); }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1PoolAllocator@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __BE586046_PoolAllocator@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PoolAllocator@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?release@PoolAllocator@@UAEXXZ		; PoolAllocator::release
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1PoolAllocator@@UAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1PoolAllocator@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1PoolAllocator@@UAE@XZ ENDP				; PoolAllocator::~PoolAllocator
END
