; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__76ED6EDA_SpookyV2@h DB 01H
__A2B2F00C_SpookyV2@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?Hash128@SpookyHash@@SAXPBXIPA_K1@Z		; SpookyHash::Hash128
PUBLIC	?Init@SpookyHash@@QAEX_K0@Z			; SpookyHash::Init
PUBLIC	?Update@SpookyHash@@QAEXPBXI@Z			; SpookyHash::Update
PUBLIC	?Final@SpookyHash@@QAEXPA_K0@Z			; SpookyHash::Final
PUBLIC	?Rot64@SpookyHash@@SA_K_KH@Z			; SpookyHash::Rot64
PUBLIC	?Mix@SpookyHash@@SAXPB_KAA_K11111111111@Z	; SpookyHash::Mix
PUBLIC	?EndPartial@SpookyHash@@SAXAA_K00000000000@Z	; SpookyHash::EndPartial
PUBLIC	?End@SpookyHash@@SAXPB_KAA_K11111111111@Z	; SpookyHash::End
PUBLIC	?ShortMix@SpookyHash@@SAXAA_K000@Z		; SpookyHash::ShortMix
PUBLIC	?ShortEnd@SpookyHash@@SAXAA_K000@Z		; SpookyHash::ShortEnd
PUBLIC	?Short@SpookyHash@@CAXPBXIPA_K1@Z		; SpookyHash::Short
PUBLIC	__JustMyCode_Default
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.cpp
;	COMDAT ?Short@SpookyHash@@CAXPBXIPA_K1@Z
_TEXT	SEGMENT
tv136 = -300						; size = 4
_end$1 = -100						; size = 4
_d$ = -88						; size = 8
_c$ = -72						; size = 8
_b$ = -56						; size = 8
_a$ = -40						; size = 8
_remainder$ = -24					; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_message$ = 8						; size = 4
_length$ = 12						; size = 4
_hash1$ = 16						; size = 4
_hash2$ = 20						; size = 4
?Short@SpookyHash@@CAXPBXIPA_K1@Z PROC			; SpookyHash::Short, COMDAT

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __A2B2F00C_SpookyV2@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 27   : #if !ALLOW_UNALIGNED_READS
; 28   : 	uint64 buf[2*sc_numVars];
; 29   : #endif
; 30   : 	union 
; 31   : 	{ 
; 32   : 		const uint8 *p8; 
; 33   : 		uint32 *p32;
; 34   : 		uint64 *p64; 
; 35   : 		size_t i; 
; 36   : 	} u;
; 37   : 
; 38   : 	u.p8 = (const uint8 *)message;

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR _u$[ebp], eax

; 39   : 	
; 40   : #if !ALLOW_UNALIGNED_READS
; 41   : 	if (u.i & 0x7)
; 42   : 	{
; 43   : 		memcpy(buf, message, length);
; 44   : 		u.p64 = buf;
; 45   : 	}
; 46   : #endif
; 47   : 
; 48   : 	size_t remainder = length%32;

	mov	eax, DWORD PTR _length$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _remainder$[ebp], edx

; 49   : 	uint64 a=*hash1;

	mov	eax, DWORD PTR _hash1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _a$[ebp], ecx
	mov	DWORD PTR _a$[ebp+4], edx

; 50   : 	uint64 b=*hash2;

	mov	eax, DWORD PTR _hash2$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _b$[ebp], ecx
	mov	DWORD PTR _b$[ebp+4], edx

; 51   : 	uint64 c=sc_const;

	mov	eax, -559038737				; deadbeefH
	mov	DWORD PTR _c$[ebp], -559038737		; deadbeefH
	mov	DWORD PTR _c$[ebp+4], eax

; 52   : 	uint64 d=sc_const;

	mov	eax, -559038737				; deadbeefH
	mov	DWORD PTR _d$[ebp], -559038737		; deadbeefH
	mov	DWORD PTR _d$[ebp+4], eax

; 53   : 
; 54   : 	if (length > 15)

	cmp	DWORD PTR _length$[ebp], 15		; 0000000fH
	jbe	$LN7@Short

; 55   : 	{
; 56   : 		const uint64 *end = u.p64 + (length/32)*4;

	mov	eax, DWORD PTR _length$[ebp]
	shr	eax, 5
	shl	eax, 2
	mov	ecx, DWORD PTR _u$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _end$1[ebp], edx

; 57   : 		
; 58   : 		// handle all complete sets of 32 bytes
; 59   : 		for (; u.p64 < end; u.p64 += 4)

	jmp	SHORT $LN4@Short
$LN2@Short:
	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _u$[ebp], eax
$LN4@Short:
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _end$1[ebp]
	jae	$LN3@Short

; 60   : 		{
; 61   : 			c += u.p64[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	esi, DWORD PTR _c$[ebp+4]
	adc	esi, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], esi

; 62   : 			d += u.p64[1];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	esi, DWORD PTR _d$[ebp+4]
	adc	esi, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _d$[ebp], edx
	mov	DWORD PTR _d$[ebp+4], esi

; 63   : 			ShortMix(a,b,c,d);

	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$[ebp]
	push	ecx
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	lea	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?ShortMix@SpookyHash@@SAXAA_K000@Z	; SpookyHash::ShortMix
	add	esp, 16					; 00000010H

; 64   : 			a += u.p64[2];

	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	esi, DWORD PTR _a$[ebp+4]
	adc	esi, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _a$[ebp], edx
	mov	DWORD PTR _a$[ebp+4], esi

; 65   : 			b += u.p64[3];

	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	esi, DWORD PTR _b$[ebp+4]
	adc	esi, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _b$[ebp], eax
	mov	DWORD PTR _b$[ebp+4], esi

; 66   : 		}

	jmp	$LN2@Short
$LN3@Short:

; 67   : 		
; 68   : 		//Handle the case of 16+ remaining bytes.
; 69   : 		if (remainder >= 16)

	cmp	DWORD PTR _remainder$[ebp], 16		; 00000010H
	jb	SHORT $LN7@Short

; 70   : 		{
; 71   : 			c += u.p64[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	esi, DWORD PTR _c$[ebp+4]
	adc	esi, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], esi

; 72   : 			d += u.p64[1];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	esi, DWORD PTR _d$[ebp+4]
	adc	esi, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _d$[ebp], edx
	mov	DWORD PTR _d$[ebp+4], esi

; 73   : 			ShortMix(a,b,c,d);

	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$[ebp]
	push	ecx
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	lea	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?ShortMix@SpookyHash@@SAXAA_K000@Z	; SpookyHash::ShortMix
	add	esp, 16					; 00000010H

; 74   : 			u.p64 += 2;

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _u$[ebp], eax

; 75   : 			remainder -= 16;

	mov	eax, DWORD PTR _remainder$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _remainder$[ebp], eax
$LN7@Short:

; 76   : 		}
; 77   : 	}
; 78   : 	
; 79   : 	// Handle the last 0..15 bytes, and its length
; 80   : 	d += ((uint64)length) << 56;

	xor	edx, edx
	mov	eax, DWORD PTR _length$[ebp]
	mov	cl, 56					; 00000038H
	call	__allshl
	add	eax, DWORD PTR _d$[ebp]
	adc	edx, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR _d$[ebp], eax
	mov	DWORD PTR _d$[ebp+4], edx

; 81   : 	switch (remainder)

	mov	eax, DWORD PTR _remainder$[ebp]
	mov	DWORD PTR tv136[ebp], eax
	cmp	DWORD PTR tv136[ebp], 15		; 0000000fH
	ja	$LN5@Short
	mov	ecx, DWORD PTR tv136[ebp]
	jmp	DWORD PTR $LN26@Short[ecx*4]
$LN9@Short:

; 82   : 	{
; 83   : 	case 15:
; 84   : 	d += ((uint64)u.p8[14]) << 48;

	mov	eax, 1
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cdq
	mov	cl, 48					; 00000030H
	call	__allshl
	add	eax, DWORD PTR _d$[ebp]
	adc	edx, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR _d$[ebp], eax
	mov	DWORD PTR _d$[ebp+4], edx
$LN10@Short:

; 85   : 	case 14:
; 86   : 		d += ((uint64)u.p8[13]) << 40;

	mov	eax, 1
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cdq
	mov	cl, 40					; 00000028H
	call	__allshl
	add	eax, DWORD PTR _d$[ebp]
	adc	edx, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR _d$[ebp], eax
	mov	DWORD PTR _d$[ebp+4], edx
$LN11@Short:

; 87   : 	case 13:
; 88   : 		d += ((uint64)u.p8[12]) << 32;

	mov	eax, 1
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cdq
	mov	cl, 32					; 00000020H
	call	__allshl
	add	eax, DWORD PTR _d$[ebp]
	adc	edx, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR _d$[ebp], eax
	mov	DWORD PTR _d$[ebp+4], edx
$LN12@Short:

; 89   : 	case 12:
; 90   : 		d += u.p32[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	xor	eax, eax
	add	edx, DWORD PTR _d$[ebp]
	adc	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR _d$[ebp], edx
	mov	DWORD PTR _d$[ebp+4], eax

; 91   : 		c += u.p64[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	esi, DWORD PTR _c$[ebp+4]
	adc	esi, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], esi

; 92   : 		break;

	jmp	$LN5@Short
$LN13@Short:

; 93   : 	case 11:
; 94   : 		d += ((uint64)u.p8[10]) << 16;

	mov	eax, 1
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cdq
	mov	cl, 16					; 00000010H
	call	__allshl
	add	eax, DWORD PTR _d$[ebp]
	adc	edx, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR _d$[ebp], eax
	mov	DWORD PTR _d$[ebp+4], edx
$LN14@Short:

; 95   : 	case 10:
; 96   : 		d += ((uint64)u.p8[9]) << 8;

	mov	eax, 1
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cdq
	mov	cl, 8
	call	__allshl
	add	eax, DWORD PTR _d$[ebp]
	adc	edx, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR _d$[ebp], eax
	mov	DWORD PTR _d$[ebp+4], edx
$LN15@Short:

; 97   : 	case 9:
; 98   : 		d += (uint64)u.p8[8];

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	cdq
	add	eax, DWORD PTR _d$[ebp]
	adc	edx, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR _d$[ebp], eax
	mov	DWORD PTR _d$[ebp+4], edx
$LN16@Short:

; 99   : 	case 8:
; 100  : 		c += u.p64[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	esi, DWORD PTR _c$[ebp+4]
	adc	esi, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], esi

; 101  : 		break;

	jmp	$LN5@Short
$LN17@Short:

; 102  : 	case 7:
; 103  : 		c += ((uint64)u.p8[6]) << 48;

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cdq
	mov	cl, 48					; 00000030H
	call	__allshl
	add	eax, DWORD PTR _c$[ebp]
	adc	edx, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], edx
$LN18@Short:

; 104  : 	case 6:
; 105  : 		c += ((uint64)u.p8[5]) << 40;

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cdq
	mov	cl, 40					; 00000028H
	call	__allshl
	add	eax, DWORD PTR _c$[ebp]
	adc	edx, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], edx
$LN19@Short:

; 106  : 	case 5:
; 107  : 		c += ((uint64)u.p8[4]) << 32;

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	cdq
	mov	cl, 32					; 00000020H
	call	__allshl
	add	eax, DWORD PTR _c$[ebp]
	adc	edx, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], edx
$LN20@Short:

; 108  : 	case 4:
; 109  : 		c += u.p32[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	xor	ecx, ecx
	add	eax, DWORD PTR _c$[ebp]
	adc	ecx, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], ecx

; 110  : 		break;

	jmp	$LN5@Short
$LN21@Short:

; 111  : 	case 3:
; 112  : 		c += ((uint64)u.p8[2]) << 16;

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	cdq
	mov	cl, 16					; 00000010H
	call	__allshl
	add	eax, DWORD PTR _c$[ebp]
	adc	edx, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], edx
$LN22@Short:

; 113  : 	case 2:
; 114  : 		c += ((uint64)u.p8[1]) << 8;

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	cdq
	mov	cl, 8
	call	__allshl
	add	eax, DWORD PTR _c$[ebp]
	adc	edx, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], edx
$LN23@Short:

; 115  : 	case 1:
; 116  : 		c += (uint64)u.p8[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cdq
	add	eax, DWORD PTR _c$[ebp]
	adc	edx, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], edx

; 117  : 		break;

	jmp	SHORT $LN5@Short
$LN24@Short:

; 118  : 	case 0:
; 119  : 		c += sc_const;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, -559038737				; deadbeefH
	mov	ecx, DWORD PTR _c$[ebp+4]
	adc	ecx, -559038737				; deadbeefH
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _c$[ebp+4], ecx

; 120  : 		d += sc_const;

	mov	eax, DWORD PTR _d$[ebp]
	add	eax, -559038737				; deadbeefH
	mov	ecx, DWORD PTR _d$[ebp+4]
	adc	ecx, -559038737				; deadbeefH
	mov	DWORD PTR _d$[ebp], eax
	mov	DWORD PTR _d$[ebp+4], ecx
$LN5@Short:

; 121  : 	}
; 122  : 	ShortEnd(a,b,c,d);

	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$[ebp]
	push	ecx
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	lea	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?ShortEnd@SpookyHash@@SAXAA_K000@Z	; SpookyHash::ShortEnd
	add	esp, 16					; 00000010H

; 123  : 	*hash1 = a;

	mov	eax, DWORD PTR _hash1$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 124  : 	*hash2 = b;

	mov	eax, DWORD PTR _hash2$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 125  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@Short
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN33@Short:
	DD	5
	DD	$LN32@Short
$LN32@Short:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN27@Short
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN28@Short
	DD	-56					; ffffffc8H
	DD	8
	DD	$LN29@Short
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN30@Short
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN31@Short
$LN31@Short:
	DB	100					; 00000064H
	DB	0
$LN30@Short:
	DB	99					; 00000063H
	DB	0
$LN29@Short:
	DB	98					; 00000062H
	DB	0
$LN28@Short:
	DB	97					; 00000061H
	DB	0
$LN27@Short:
	DB	117					; 00000075H
	DB	0
	npad	2
$LN26@Short:
	DD	$LN24@Short
	DD	$LN23@Short
	DD	$LN22@Short
	DD	$LN21@Short
	DD	$LN20@Short
	DD	$LN19@Short
	DD	$LN18@Short
	DD	$LN17@Short
	DD	$LN16@Short
	DD	$LN15@Short
	DD	$LN14@Short
	DD	$LN13@Short
	DD	$LN12@Short
	DD	$LN11@Short
	DD	$LN10@Short
	DD	$LN9@Short
?Short@SpookyHash@@CAXPBXIPA_K1@Z ENDP			; SpookyHash::Short
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.h
;	COMDAT ?ShortEnd@SpookyHash@@SAXAA_K000@Z
_TEXT	SEGMENT
_h0$ = 8						; size = 4
_h1$ = 12						; size = 4
_h2$ = 16						; size = 4
_h3$ = 20						; size = 4
?ShortEnd@SpookyHash@@SAXAA_K000@Z PROC			; SpookyHash::ShortEnd, COMDAT

; 246  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __76ED6EDA_SpookyV2@h
	call	@__CheckForDebuggerJustMyCode@4

; 247  : 		h3 ^= h2;  h2 = Rot64(h2,15);  h3 += h2;

	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	15					; 0000000fH
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 248  : 		h0 ^= h3;  h3 = Rot64(h3,52);  h0 += h3;

	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	52					; 00000034H
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 249  : 		h1 ^= h0;  h0 = Rot64(h0,26);  h1 += h0;

	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	26					; 0000001aH
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 250  : 		h2 ^= h1;  h1 = Rot64(h1,51);  h2 += h1;

	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	51					; 00000033H
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 251  : 		h3 ^= h2;  h2 = Rot64(h2,28);  h3 += h2;

	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	28					; 0000001cH
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 252  : 		h0 ^= h3;  h3 = Rot64(h3,9);   h0 += h3;

	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	9
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 253  : 		h1 ^= h0;  h0 = Rot64(h0,47);  h1 += h0;

	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	47					; 0000002fH
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 254  : 		h2 ^= h1;  h1 = Rot64(h1,54);  h2 += h1;

	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	54					; 00000036H
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 255  : 		h3 ^= h2;  h2 = Rot64(h2,32);  h3 += h2;

	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	32					; 00000020H
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 256  : 		h0 ^= h3;  h3 = Rot64(h3,25);  h0 += h3;

	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	25					; 00000019H
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 257  : 		h1 ^= h0;  h0 = Rot64(h0,63);  h1 += h0;

	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	63					; 0000003fH
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 258  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ShortEnd@SpookyHash@@SAXAA_K000@Z ENDP			; SpookyHash::ShortEnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.h
;	COMDAT ?ShortMix@SpookyHash@@SAXAA_K000@Z
_TEXT	SEGMENT
_h0$ = 8						; size = 4
_h1$ = 12						; size = 4
_h2$ = 16						; size = 4
_h3$ = 20						; size = 4
?ShortMix@SpookyHash@@SAXAA_K000@Z PROC			; SpookyHash::ShortMix, COMDAT

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __76ED6EDA_SpookyV2@h
	call	@__CheckForDebuggerJustMyCode@4

; 219  : 		h2 = Rot64(h2,50);	h2 += h3;  h0 ^= h2;

	push	50					; 00000032H
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 220  : 		h3 = Rot64(h3,52);	h3 += h0;  h1 ^= h3;

	push	52					; 00000034H
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 221  : 		h0 = Rot64(h0,30);	h0 += h1;  h2 ^= h0;

	push	30					; 0000001eH
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 222  : 		h1 = Rot64(h1,41);	h1 += h2;  h3 ^= h1;

	push	41					; 00000029H
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 223  : 		h2 = Rot64(h2,54);	h2 += h3;  h0 ^= h2;

	push	54					; 00000036H
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 224  : 		h3 = Rot64(h3,48);	h3 += h0;  h1 ^= h3;

	push	48					; 00000030H
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 225  : 		h0 = Rot64(h0,38);	h0 += h1;  h2 ^= h0;

	push	38					; 00000026H
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 226  : 		h1 = Rot64(h1,37);	h1 += h2;  h3 ^= h1;

	push	37					; 00000025H
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 227  : 		h2 = Rot64(h2,62);	h2 += h3;  h0 ^= h2;

	push	62					; 0000003eH
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 228  : 		h3 = Rot64(h3,34);	h3 += h0;  h1 ^= h3;

	push	34					; 00000022H
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 229  : 		h0 = Rot64(h0,5);	h0 += h1;  h2 ^= h0;

	push	5
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 230  : 		h1 = Rot64(h1,36);	h1 += h2;  h3 ^= h1;

	push	36					; 00000024H
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 231  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ShortMix@SpookyHash@@SAXAA_K000@Z ENDP			; SpookyHash::ShortMix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.h
;	COMDAT ?End@SpookyHash@@SAXPB_KAA_K11111111111@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
_h0$ = 12						; size = 4
_h1$ = 16						; size = 4
_h2$ = 20						; size = 4
_h3$ = 24						; size = 4
_h4$ = 28						; size = 4
_h5$ = 32						; size = 4
_h6$ = 36						; size = 4
_h7$ = 40						; size = 4
_h8$ = 44						; size = 4
_h9$ = 48						; size = 4
_h10$ = 52						; size = 4
_h11$ = 56						; size = 4
?End@SpookyHash@@SAXPB_KAA_K11111111111@Z PROC		; SpookyHash::End, COMDAT

; 193  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __76ED6EDA_SpookyV2@h
	call	@__CheckForDebuggerJustMyCode@4

; 194  : 		h0 += data[0];	 h1 += data[1];	  h2 += data[2];   h3 += data[3];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _h0$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [ecx]
	add	esi, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+4]
	adc	ecx, DWORD PTR [edx+eax+4]
	mov	edx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], ecx
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [ecx]
	add	esi, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+4]
	adc	ecx, DWORD PTR [edx+eax+4]
	mov	edx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], ecx
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _h3$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx

; 195  : 		h4 += data[4];	 h5 += data[5];	  h6 += data[6];   h7 += data[7];

	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR _h4$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [ecx]
	add	esi, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+4]
	adc	ecx, DWORD PTR [edx+eax+4]
	mov	edx, DWORD PTR _h4$[ebp]
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], ecx
	mov	eax, 8
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _h5$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _h5$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, 8
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _h6$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _h6$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, 8
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _h7$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _h7$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx

; 196  : 		h8 += data[8];	 h9 += data[9];	  h10 += data[10]; h11 += data[11];

	mov	eax, 8
	shl	eax, 3
	mov	ecx, DWORD PTR _h8$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [ecx]
	add	esi, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+4]
	adc	ecx, DWORD PTR [edx+eax+4]
	mov	edx, DWORD PTR _h8$[ebp]
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], ecx
	mov	eax, 8
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _h9$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _h9$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, 8
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _h10$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _h10$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, 8
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _h11$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _h11$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx

; 197  : 		EndPartial(h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);

	mov	eax, DWORD PTR _h11$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h10$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h9$[ebp]
	push	edx
	mov	eax, DWORD PTR _h8$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h7$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h6$[ebp]
	push	edx
	mov	eax, DWORD PTR _h5$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h4$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h3$[ebp]
	push	edx
	mov	eax, DWORD PTR _h2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h0$[ebp]
	push	edx
	call	?EndPartial@SpookyHash@@SAXAA_K00000000000@Z ; SpookyHash::EndPartial
	add	esp, 48					; 00000030H

; 198  : 		EndPartial(h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);

	mov	eax, DWORD PTR _h11$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h10$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h9$[ebp]
	push	edx
	mov	eax, DWORD PTR _h8$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h7$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h6$[ebp]
	push	edx
	mov	eax, DWORD PTR _h5$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h4$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h3$[ebp]
	push	edx
	mov	eax, DWORD PTR _h2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h0$[ebp]
	push	edx
	call	?EndPartial@SpookyHash@@SAXAA_K00000000000@Z ; SpookyHash::EndPartial
	add	esp, 48					; 00000030H

; 199  : 		EndPartial(h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);

	mov	eax, DWORD PTR _h11$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h10$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h9$[ebp]
	push	edx
	mov	eax, DWORD PTR _h8$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h7$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h6$[ebp]
	push	edx
	mov	eax, DWORD PTR _h5$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h4$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h3$[ebp]
	push	edx
	mov	eax, DWORD PTR _h2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h0$[ebp]
	push	edx
	call	?EndPartial@SpookyHash@@SAXAA_K00000000000@Z ; SpookyHash::EndPartial
	add	esp, 48					; 00000030H

; 200  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?End@SpookyHash@@SAXPB_KAA_K11111111111@Z ENDP		; SpookyHash::End
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.h
;	COMDAT ?EndPartial@SpookyHash@@SAXAA_K00000000000@Z
_TEXT	SEGMENT
_h0$ = 8						; size = 4
_h1$ = 12						; size = 4
_h2$ = 16						; size = 4
_h3$ = 20						; size = 4
_h4$ = 24						; size = 4
_h5$ = 28						; size = 4
_h6$ = 32						; size = 4
_h7$ = 36						; size = 4
_h8$ = 40						; size = 4
_h9$ = 44						; size = 4
_h10$ = 48						; size = 4
_h11$ = 52						; size = 4
?EndPartial@SpookyHash@@SAXAA_K00000000000@Z PROC	; SpookyHash::EndPartial, COMDAT

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __76ED6EDA_SpookyV2@h
	call	@__CheckForDebuggerJustMyCode@4

; 174  : 		h11+= h1;	 h2 ^= h11;	  h1 = Rot64(h1,44);

	mov	eax, DWORD PTR _h11$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h11$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h11$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	44					; 0000002cH
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 175  : 		h0 += h2;	 h3 ^= h0;	  h2 = Rot64(h2,15);

	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	15					; 0000000fH
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 176  : 		h1 += h3;	 h4 ^= h1;	  h3 = Rot64(h3,34);

	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h4$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h4$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	34					; 00000022H
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 177  : 		h2 += h4;	 h5 ^= h2;	  h4 = Rot64(h4,21);

	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _h4$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h5$[ebp]
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h5$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	21					; 00000015H
	mov	eax, DWORD PTR _h4$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h4$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 178  : 		h3 += h5;	 h6 ^= h3;	  h5 = Rot64(h5,38);

	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h5$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h6$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h6$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	38					; 00000026H
	mov	eax, DWORD PTR _h5$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h5$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 179  : 		h4 += h6;	 h7 ^= h4;	  h6 = Rot64(h6,33);

	mov	eax, DWORD PTR _h4$[ebp]
	mov	ecx, DWORD PTR _h6$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h4$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h7$[ebp]
	mov	ecx, DWORD PTR _h4$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h7$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	33					; 00000021H
	mov	eax, DWORD PTR _h6$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h6$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 180  : 		h5 += h7;	 h8 ^= h5;	  h7 = Rot64(h7,10);

	mov	eax, DWORD PTR _h5$[ebp]
	mov	ecx, DWORD PTR _h7$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h5$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h8$[ebp]
	mov	ecx, DWORD PTR _h5$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h8$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	10					; 0000000aH
	mov	eax, DWORD PTR _h7$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h7$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 181  : 		h6 += h8;	 h9 ^= h6;	  h8 = Rot64(h8,13);

	mov	eax, DWORD PTR _h6$[ebp]
	mov	ecx, DWORD PTR _h8$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h6$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h9$[ebp]
	mov	ecx, DWORD PTR _h6$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h9$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	13					; 0000000dH
	mov	eax, DWORD PTR _h8$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h8$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 182  : 		h7 += h9;	 h10^= h7;	  h9 = Rot64(h9,38);

	mov	eax, DWORD PTR _h7$[ebp]
	mov	ecx, DWORD PTR _h9$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h7$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h10$[ebp]
	mov	ecx, DWORD PTR _h7$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h10$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	38					; 00000026H
	mov	eax, DWORD PTR _h9$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h9$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 183  : 		h8 += h10;	 h11^= h8;	  h10= Rot64(h10,53);

	mov	eax, DWORD PTR _h8$[ebp]
	mov	ecx, DWORD PTR _h10$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h8$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h11$[ebp]
	mov	ecx, DWORD PTR _h8$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h11$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	53					; 00000035H
	mov	eax, DWORD PTR _h10$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h10$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 184  : 		h9 += h11;	 h0 ^= h9;	  h11= Rot64(h11,42);

	mov	eax, DWORD PTR _h9$[ebp]
	mov	ecx, DWORD PTR _h11$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h9$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR _h9$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	42					; 0000002aH
	mov	eax, DWORD PTR _h11$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h11$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 185  : 		h10+= h0;	 h1 ^= h10;	  h0 = Rot64(h0,54);

	mov	eax, DWORD PTR _h10$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h10$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _h1$[ebp]
	mov	ecx, DWORD PTR _h10$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	54					; 00000036H
	mov	eax, DWORD PTR _h0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 186  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?EndPartial@SpookyHash@@SAXAA_K00000000000@Z ENDP	; SpookyHash::EndPartial
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.h
;	COMDAT ?Mix@SpookyHash@@SAXPB_KAA_K11111111111@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
_s0$ = 12						; size = 4
_s1$ = 16						; size = 4
_s2$ = 20						; size = 4
_s3$ = 24						; size = 4
_s4$ = 28						; size = 4
_s5$ = 32						; size = 4
_s6$ = 36						; size = 4
_s7$ = 40						; size = 4
_s8$ = 44						; size = 4
_s9$ = 48						; size = 4
_s10$ = 52						; size = 4
_s11$ = 56						; size = 4
?Mix@SpookyHash@@SAXPB_KAA_K11111111111@Z PROC		; SpookyHash::Mix, COMDAT

; 138  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __76ED6EDA_SpookyV2@h
	call	@__CheckForDebuggerJustMyCode@4

; 139  : 	  s0 += data[0];	s2 ^= s10;	  s11 ^= s0;	s0 = Rot64(s0,11);	  s11 += s1;

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _s0$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _s0$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _s2$[ebp]
	mov	ecx, DWORD PTR _s10$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s11$[ebp]
	mov	ecx, DWORD PTR _s0$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s11$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	11					; 0000000bH
	mov	eax, DWORD PTR _s0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s0$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s11$[ebp]
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s11$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 140  : 	  s1 += data[1];	s3 ^= s11;	  s0 ^= s1;	   s1 = Rot64(s1,32);	 s0 += s2;

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [ecx]
	add	esi, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+4]
	adc	ecx, DWORD PTR [edx+eax+4]
	mov	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _s3$[ebp]
	mov	ecx, DWORD PTR _s11$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s0$[ebp]
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	32					; 00000020H
	mov	eax, DWORD PTR _s1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s0$[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 141  : 	  s2 += data[2];	s4 ^= s0;	 s1 ^= s2;	  s2 = Rot64(s2,43);	s1 += s3;

	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [ecx]
	add	esi, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+4]
	adc	ecx, DWORD PTR [edx+eax+4]
	mov	edx, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _s4$[ebp]
	mov	ecx, DWORD PTR _s0$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s4$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s1$[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	43					; 0000002bH
	mov	eax, DWORD PTR _s2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s1$[ebp]
	mov	ecx, DWORD PTR _s3$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 142  : 	  s3 += data[3];	s5 ^= s1;	 s2 ^= s3;	  s3 = Rot64(s3,31);	s2 += s4;

	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _s3$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _s3$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _s5$[ebp]
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s5$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	ecx, DWORD PTR _s3$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	31					; 0000001fH
	mov	eax, DWORD PTR _s3$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s3$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s2$[ebp]
	mov	ecx, DWORD PTR _s4$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 143  : 	  s4 += data[4];	s6 ^= s2;	 s3 ^= s4;	  s4 = Rot64(s4,17);	s3 += s5;

	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR _s4$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [ecx]
	add	esi, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+4]
	adc	ecx, DWORD PTR [edx+eax+4]
	mov	edx, DWORD PTR _s4$[ebp]
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _s6$[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s6$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s3$[ebp]
	mov	ecx, DWORD PTR _s4$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	17					; 00000011H
	mov	eax, DWORD PTR _s4$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s4$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s3$[ebp]
	mov	ecx, DWORD PTR _s5$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s3$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 144  : 	  s5 += data[5];	s7 ^= s3;	 s4 ^= s5;	  s5 = Rot64(s5,28);	s4 += s6;

	mov	eax, 8
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _s5$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _s5$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _s7$[ebp]
	mov	ecx, DWORD PTR _s3$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s7$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s4$[ebp]
	mov	ecx, DWORD PTR _s5$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s4$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	28					; 0000001cH
	mov	eax, DWORD PTR _s5$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s5$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s4$[ebp]
	mov	ecx, DWORD PTR _s6$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s4$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 145  : 	  s6 += data[6];	s8 ^= s4;	 s5 ^= s6;	  s6 = Rot64(s6,39);	s5 += s7;

	mov	eax, 8
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _s6$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _s6$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _s8$[ebp]
	mov	ecx, DWORD PTR _s4$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s8$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s5$[ebp]
	mov	ecx, DWORD PTR _s6$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s5$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	39					; 00000027H
	mov	eax, DWORD PTR _s6$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s6$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s5$[ebp]
	mov	ecx, DWORD PTR _s7$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s5$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 146  : 	  s7 += data[7];	s9 ^= s5;	 s6 ^= s7;	  s7 = Rot64(s7,57);	s6 += s8;

	mov	eax, 8
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _s7$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _s7$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _s9$[ebp]
	mov	ecx, DWORD PTR _s5$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s9$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s6$[ebp]
	mov	ecx, DWORD PTR _s7$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s6$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	57					; 00000039H
	mov	eax, DWORD PTR _s7$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s7$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s6$[ebp]
	mov	ecx, DWORD PTR _s8$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s6$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 147  : 	  s8 += data[8];	s10 ^= s6;	  s7 ^= s8;	   s8 = Rot64(s8,55);	 s7 += s9;

	mov	eax, 8
	shl	eax, 3
	mov	ecx, DWORD PTR _s8$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [ecx]
	add	esi, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [ecx+4]
	adc	ecx, DWORD PTR [edx+eax+4]
	mov	edx, DWORD PTR _s8$[ebp]
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _s10$[ebp]
	mov	ecx, DWORD PTR _s6$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s10$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s7$[ebp]
	mov	ecx, DWORD PTR _s8$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s7$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	55					; 00000037H
	mov	eax, DWORD PTR _s8$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s8$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s7$[ebp]
	mov	ecx, DWORD PTR _s9$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s7$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 148  : 	  s9 += data[9];	s11 ^= s7;	  s8 ^= s9;	   s9 = Rot64(s9,54);	 s8 += s10;

	mov	eax, 8
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _s9$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _s9$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _s11$[ebp]
	mov	ecx, DWORD PTR _s7$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s11$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s8$[ebp]
	mov	ecx, DWORD PTR _s9$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s8$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	54					; 00000036H
	mov	eax, DWORD PTR _s9$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s9$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s8$[ebp]
	mov	ecx, DWORD PTR _s10$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s8$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 149  : 	  s10 += data[10];	  s0 ^= s8;	   s9 ^= s10;	 s10 = Rot64(s10,22);	 s9 += s11;

	mov	eax, 8
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _s10$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _s10$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _s0$[ebp]
	mov	ecx, DWORD PTR _s8$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s0$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s9$[ebp]
	mov	ecx, DWORD PTR _s10$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s9$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	22					; 00000016H
	mov	eax, DWORD PTR _s10$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s10$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s9$[ebp]
	mov	ecx, DWORD PTR _s11$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s9$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 150  : 	  s11 += data[11];	  s1 ^= s9;	   s10 ^= s11;	  s11 = Rot64(s11,46);	  s10 += s0;

	mov	eax, 8
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _s11$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _s11$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _s1$[ebp]
	mov	ecx, DWORD PTR _s9$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s10$[ebp]
	mov	ecx, DWORD PTR _s11$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s10$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	push	46					; 0000002eH
	mov	eax, DWORD PTR _s11$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?Rot64@SpookyHash@@SA_K_KH@Z		; SpookyHash::Rot64
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s11$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _s10$[ebp]
	mov	ecx, DWORD PTR _s0$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _s10$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 151  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Mix@SpookyHash@@SAXPB_KAA_K11111111111@Z ENDP		; SpookyHash::Mix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.h
;	COMDAT ?Rot64@SpookyHash@@SA_K_KH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 8
_k$ = 16						; size = 4
?Rot64@SpookyHash@@SA_K_KH@Z PROC			; SpookyHash::Rot64, COMDAT

; 116  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __76ED6EDA_SpookyV2@h
	call	@__CheckForDebuggerJustMyCode@4

; 117  : 		return (x << k) | (x >> (64 - k));

	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _x$[ebp+4]
	mov	ecx, DWORD PTR _k$[ebp]
	call	__allshl
	mov	esi, eax
	mov	edi, edx
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _x$[ebp+4]
	call	__aullshr
	or	esi, eax
	or	edi, edx
	mov	eax, esi
	mov	edx, edi

; 118  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Rot64@SpookyHash@@SA_K_KH@Z ENDP			; SpookyHash::Rot64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.cpp
;	COMDAT ?Final@SpookyHash@@QAEXPA_K0@Z
_TEXT	SEGMENT
_h11$ = -228						; size = 8
_h10$ = -212						; size = 8
_h9$ = -196						; size = 8
_h8$ = -180						; size = 8
_h7$ = -164						; size = 8
_h6$ = -148						; size = 8
_h5$ = -132						; size = 8
_h4$ = -116						; size = 8
_h3$ = -100						; size = 8
_h2$ = -84						; size = 8
_h1$ = -68						; size = 8
_h0$ = -52						; size = 8
_remainder$ = -33					; size = 1
_data$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_hash1$ = 8						; size = 4
_hash2$ = 12						; size = 4
?Final@SpookyHash@@QAEXPA_K0@Z PROC			; SpookyHash::Final, COMDAT
; _this$ = ecx

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-424]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __A2B2F00C_SpookyV2@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 319  : 	// init the variables
; 320  : 	if (m_length < sc_bufSize)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+288], 192		; 000000c0H
	jae	SHORT $LN2@Final

; 321  : 	{
; 322  : 		*hash1 = m_state[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _hash1$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+ecx+192]
	mov	ecx, DWORD PTR [eax+ecx+196]
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], ecx

; 323  : 		*hash2 = m_state[1];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _hash2$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+eax+192]
	mov	eax, DWORD PTR [edx+eax+196]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], eax

; 324  : 		Short( m_data, m_length, hash1, hash2);

	mov	eax, DWORD PTR _hash2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hash1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+288]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Short@SpookyHash@@CAXPBXIPA_K1@Z	; SpookyHash::Short
	add	esp, 16					; 00000010H

; 325  : 		return;

	jmp	$LN1@Final
$LN2@Final:

; 326  : 	}
; 327  : 	
; 328  : 	const uint64 *data = (const uint64 *)m_data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _data$[ebp], eax

; 329  : 	uint8 remainder = m_remainder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+292]
	mov	BYTE PTR _remainder$[ebp], cl

; 330  : 	
; 331  : 	uint64 h0 = m_state[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h0$[ebp], eax
	mov	DWORD PTR _h0$[ebp+4], ecx

; 332  : 	uint64 h1 = m_state[1];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+192]
	mov	eax, DWORD PTR [ecx+eax+196]
	mov	DWORD PTR _h1$[ebp], edx
	mov	DWORD PTR _h1$[ebp+4], eax

; 333  : 	uint64 h2 = m_state[2];

	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+192]
	mov	eax, DWORD PTR [ecx+eax+196]
	mov	DWORD PTR _h2$[ebp], edx
	mov	DWORD PTR _h2$[ebp+4], eax

; 334  : 	uint64 h3 = m_state[3];

	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h3$[ebp], eax
	mov	DWORD PTR _h3$[ebp+4], ecx

; 335  : 	uint64 h4 = m_state[4];

	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+192]
	mov	eax, DWORD PTR [ecx+eax+196]
	mov	DWORD PTR _h4$[ebp], edx
	mov	DWORD PTR _h4$[ebp+4], eax

; 336  : 	uint64 h5 = m_state[5];

	mov	eax, 8
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h5$[ebp], eax
	mov	DWORD PTR _h5$[ebp+4], ecx

; 337  : 	uint64 h6 = m_state[6];

	mov	eax, 8
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h6$[ebp], eax
	mov	DWORD PTR _h6$[ebp+4], ecx

; 338  : 	uint64 h7 = m_state[7];

	mov	eax, 8
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h7$[ebp], eax
	mov	DWORD PTR _h7$[ebp+4], ecx

; 339  : 	uint64 h8 = m_state[8];

	mov	eax, 8
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+192]
	mov	eax, DWORD PTR [ecx+eax+196]
	mov	DWORD PTR _h8$[ebp], edx
	mov	DWORD PTR _h8$[ebp+4], eax

; 340  : 	uint64 h9 = m_state[9];

	mov	eax, 8
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h9$[ebp], eax
	mov	DWORD PTR _h9$[ebp+4], ecx

; 341  : 	uint64 h10 = m_state[10];

	mov	eax, 8
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h10$[ebp], eax
	mov	DWORD PTR _h10$[ebp+4], ecx

; 342  : 	uint64 h11 = m_state[11];

	mov	eax, 8
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h11$[ebp], eax
	mov	DWORD PTR _h11$[ebp+4], ecx

; 343  : 
; 344  : 	if (remainder >= sc_blockSize)

	movzx	eax, BYTE PTR _remainder$[ebp]
	cmp	eax, 96					; 00000060H
	jb	SHORT $LN3@Final

; 345  : 	{
; 346  : 		// m_data can contain two blocks; handle any whole first block
; 347  : 		Mix(data, h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);

	lea	eax, DWORD PTR _h11$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h10$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h9$[ebp]
	push	edx
	lea	eax, DWORD PTR _h8$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h7$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h6$[ebp]
	push	edx
	lea	eax, DWORD PTR _h5$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h4$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h3$[ebp]
	push	edx
	lea	eax, DWORD PTR _h2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h0$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	?Mix@SpookyHash@@SAXPB_KAA_K11111111111@Z ; SpookyHash::Mix
	add	esp, 52					; 00000034H

; 348  : 		data += sc_numVars;

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 96					; 00000060H
	mov	DWORD PTR _data$[ebp], eax

; 349  : 		remainder -= sc_blockSize;

	movzx	eax, BYTE PTR _remainder$[ebp]
	sub	eax, 96					; 00000060H
	mov	BYTE PTR _remainder$[ebp], al
$LN3@Final:

; 350  : 	}
; 351  : 
; 352  : 	// mix in the last partial block, and the length mod sc_blockSize
; 353  : 	memset(&((uint8 *)data)[remainder], 0, (sc_blockSize-remainder));

	movzx	eax, BYTE PTR _remainder$[ebp]
	mov	ecx, 96					; 00000060H
	sub	ecx, eax
	push	ecx
	push	0
	movzx	edx, BYTE PTR _remainder$[ebp]
	add	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 354  : 
; 355  : 	((uint8 *)data)[sc_blockSize-1] = remainder;

	mov	eax, 1
	imul	ecx, eax, 95
	mov	edx, DWORD PTR _data$[ebp]
	mov	al, BYTE PTR _remainder$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 356  : 	
; 357  : 	// do some final mixing
; 358  : 	End(data, h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);

	lea	eax, DWORD PTR _h11$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h10$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h9$[ebp]
	push	edx
	lea	eax, DWORD PTR _h8$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h7$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h6$[ebp]
	push	edx
	lea	eax, DWORD PTR _h5$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h4$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h3$[ebp]
	push	edx
	lea	eax, DWORD PTR _h2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h0$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	?End@SpookyHash@@SAXPB_KAA_K11111111111@Z ; SpookyHash::End
	add	esp, 52					; 00000034H

; 359  : 
; 360  : 	*hash1 = h0;

	mov	eax, DWORD PTR _hash1$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR _h0$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 361  : 	*hash2 = h1;

	mov	eax, DWORD PTR _hash2$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR _h1$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN1@Final:

; 362  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Final
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 424				; 000001a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN18@Final:
	DD	12					; 0000000cH
	DD	$LN17@Final
$LN17@Final:
	DD	-52					; ffffffccH
	DD	8
	DD	$LN5@Final
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN6@Final
	DD	-84					; ffffffacH
	DD	8
	DD	$LN7@Final
	DD	-100					; ffffff9cH
	DD	8
	DD	$LN8@Final
	DD	-116					; ffffff8cH
	DD	8
	DD	$LN9@Final
	DD	-132					; ffffff7cH
	DD	8
	DD	$LN10@Final
	DD	-148					; ffffff6cH
	DD	8
	DD	$LN11@Final
	DD	-164					; ffffff5cH
	DD	8
	DD	$LN12@Final
	DD	-180					; ffffff4cH
	DD	8
	DD	$LN13@Final
	DD	-196					; ffffff3cH
	DD	8
	DD	$LN14@Final
	DD	-212					; ffffff2cH
	DD	8
	DD	$LN15@Final
	DD	-228					; ffffff1cH
	DD	8
	DD	$LN16@Final
$LN16@Final:
	DB	104					; 00000068H
	DB	49					; 00000031H
	DB	49					; 00000031H
	DB	0
$LN15@Final:
	DB	104					; 00000068H
	DB	49					; 00000031H
	DB	48					; 00000030H
	DB	0
$LN14@Final:
	DB	104					; 00000068H
	DB	57					; 00000039H
	DB	0
$LN13@Final:
	DB	104					; 00000068H
	DB	56					; 00000038H
	DB	0
$LN12@Final:
	DB	104					; 00000068H
	DB	55					; 00000037H
	DB	0
$LN11@Final:
	DB	104					; 00000068H
	DB	54					; 00000036H
	DB	0
$LN10@Final:
	DB	104					; 00000068H
	DB	53					; 00000035H
	DB	0
$LN9@Final:
	DB	104					; 00000068H
	DB	52					; 00000034H
	DB	0
$LN8@Final:
	DB	104					; 00000068H
	DB	51					; 00000033H
	DB	0
$LN7@Final:
	DB	104					; 00000068H
	DB	50					; 00000032H
	DB	0
$LN6@Final:
	DB	104					; 00000068H
	DB	49					; 00000031H
	DB	0
$LN5@Final:
	DB	104					; 00000068H
	DB	48					; 00000030H
	DB	0
?Final@SpookyHash@@QAEXPA_K0@Z ENDP			; SpookyHash::Final
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.cpp
;	COMDAT ?Update@SpookyHash@@QAEXPBXI@Z
_TEXT	SEGMENT
_prefix$1 = -261					; size = 1
_end$ = -252						; size = 4
_u$ = -240						; size = 4
_remainder$ = -225					; size = 1
_newLength$ = -216					; size = 4
_h11$ = -204						; size = 8
_h10$ = -188						; size = 8
_h9$ = -172						; size = 8
_h8$ = -156						; size = 8
_h7$ = -140						; size = 8
_h6$ = -124						; size = 8
_h5$ = -108						; size = 8
_h4$ = -92						; size = 8
_h3$ = -76						; size = 8
_h2$ = -60						; size = 8
_h1$ = -44						; size = 8
_h0$ = -28						; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_message$ = 8						; size = 4
_length$ = 12						; size = 4
?Update@SpookyHash@@QAEXPBXI@Z PROC			; SpookyHash::Update, COMDAT
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __A2B2F00C_SpookyV2@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 211  : 	uint64 h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11;
; 212  : 	size_t newLength = length + m_remainder;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	add	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR _newLength$[ebp], ecx

; 213  : 	uint8  remainder;
; 214  : 	union 
; 215  : 	{ 
; 216  : 		const uint8 *p8; 
; 217  : 		uint64 *p64; 
; 218  : 		size_t i; 
; 219  : 	} u;
; 220  : 	const uint64 *end;
; 221  : 	
; 222  : 	// Is this message fragment too short?	If it is, stuff it away.
; 223  : 	if (newLength < sc_bufSize)

	cmp	DWORD PTR _newLength$[ebp], 192		; 000000c0H
	jae	SHORT $LN4@Update

; 224  : 	{
; 225  : 		memcpy(&((uint8 *)m_data)[m_remainder], message, length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+292]
	add	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 226  : 		m_length = length + m_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, DWORD PTR [eax+288]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], ecx

; 227  : 		m_remainder = (uint8)newLength;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _newLength$[ebp]
	mov	BYTE PTR [eax+292], cl

; 228  : 		return;

	jmp	$LN1@Update
$LN4@Update:

; 229  : 	}
; 230  : 	
; 231  : 	// init the variables
; 232  : 	if (m_length < sc_bufSize)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+288], 192		; 000000c0H
	jae	$LN5@Update

; 233  : 	{
; 234  : 		h0=h3=h6=h9	 = m_state[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h9$[ebp], eax
	mov	DWORD PTR _h9$[ebp+4], ecx
	mov	edx, DWORD PTR _h9$[ebp]
	mov	eax, DWORD PTR _h9$[ebp+4]
	mov	DWORD PTR _h6$[ebp], edx
	mov	DWORD PTR _h6$[ebp+4], eax
	mov	ecx, DWORD PTR _h6$[ebp]
	mov	edx, DWORD PTR _h6$[ebp+4]
	mov	DWORD PTR _h3$[ebp], ecx
	mov	DWORD PTR _h3$[ebp+4], edx
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _h3$[ebp+4]
	mov	DWORD PTR _h0$[ebp], eax
	mov	DWORD PTR _h0$[ebp+4], ecx

; 235  : 		h1=h4=h7=h10 = m_state[1];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+192]
	mov	eax, DWORD PTR [ecx+eax+196]
	mov	DWORD PTR _h10$[ebp], edx
	mov	DWORD PTR _h10$[ebp+4], eax
	mov	ecx, DWORD PTR _h10$[ebp]
	mov	edx, DWORD PTR _h10$[ebp+4]
	mov	DWORD PTR _h7$[ebp], ecx
	mov	DWORD PTR _h7$[ebp+4], edx
	mov	eax, DWORD PTR _h7$[ebp]
	mov	ecx, DWORD PTR _h7$[ebp+4]
	mov	DWORD PTR _h4$[ebp], eax
	mov	DWORD PTR _h4$[ebp+4], ecx
	mov	edx, DWORD PTR _h4$[ebp]
	mov	eax, DWORD PTR _h4$[ebp+4]
	mov	DWORD PTR _h1$[ebp], edx
	mov	DWORD PTR _h1$[ebp+4], eax

; 236  : 		h2=h5=h8=h11 = sc_const;

	mov	eax, -559038737				; deadbeefH
	mov	DWORD PTR _h11$[ebp], -559038737	; deadbeefH
	mov	DWORD PTR _h11$[ebp+4], eax
	mov	ecx, DWORD PTR _h11$[ebp]
	mov	edx, DWORD PTR _h11$[ebp+4]
	mov	DWORD PTR _h8$[ebp], ecx
	mov	DWORD PTR _h8$[ebp+4], edx
	mov	eax, DWORD PTR _h8$[ebp]
	mov	ecx, DWORD PTR _h8$[ebp+4]
	mov	DWORD PTR _h5$[ebp], eax
	mov	DWORD PTR _h5$[ebp+4], ecx
	mov	edx, DWORD PTR _h5$[ebp]
	mov	eax, DWORD PTR _h5$[ebp+4]
	mov	DWORD PTR _h2$[ebp], edx
	mov	DWORD PTR _h2$[ebp+4], eax

; 237  : 	}

	jmp	$LN6@Update
$LN5@Update:

; 238  : 	else
; 239  : 	{
; 240  : 		h0 = m_state[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h0$[ebp], eax
	mov	DWORD PTR _h0$[ebp+4], ecx

; 241  : 		h1 = m_state[1];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+192]
	mov	eax, DWORD PTR [ecx+eax+196]
	mov	DWORD PTR _h1$[ebp], edx
	mov	DWORD PTR _h1$[ebp+4], eax

; 242  : 		h2 = m_state[2];

	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+192]
	mov	eax, DWORD PTR [ecx+eax+196]
	mov	DWORD PTR _h2$[ebp], edx
	mov	DWORD PTR _h2$[ebp+4], eax

; 243  : 		h3 = m_state[3];

	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h3$[ebp], eax
	mov	DWORD PTR _h3$[ebp+4], ecx

; 244  : 		h4 = m_state[4];

	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+192]
	mov	eax, DWORD PTR [ecx+eax+196]
	mov	DWORD PTR _h4$[ebp], edx
	mov	DWORD PTR _h4$[ebp+4], eax

; 245  : 		h5 = m_state[5];

	mov	eax, 8
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h5$[ebp], eax
	mov	DWORD PTR _h5$[ebp+4], ecx

; 246  : 		h6 = m_state[6];

	mov	eax, 8
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h6$[ebp], eax
	mov	DWORD PTR _h6$[ebp+4], ecx

; 247  : 		h7 = m_state[7];

	mov	eax, 8
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h7$[ebp], eax
	mov	DWORD PTR _h7$[ebp+4], ecx

; 248  : 		h8 = m_state[8];

	mov	eax, 8
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+192]
	mov	eax, DWORD PTR [ecx+eax+196]
	mov	DWORD PTR _h8$[ebp], edx
	mov	DWORD PTR _h8$[ebp+4], eax

; 249  : 		h9 = m_state[9];

	mov	eax, 8
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h9$[ebp], eax
	mov	DWORD PTR _h9$[ebp+4], ecx

; 250  : 		h10 = m_state[10];

	mov	eax, 8
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h10$[ebp], eax
	mov	DWORD PTR _h10$[ebp+4], ecx

; 251  : 		h11 = m_state[11];

	mov	eax, 8
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+192]
	mov	ecx, DWORD PTR [edx+ecx+196]
	mov	DWORD PTR _h11$[ebp], eax
	mov	DWORD PTR _h11$[ebp+4], ecx
$LN6@Update:

; 252  : 	}
; 253  : 	m_length = length + m_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, DWORD PTR [eax+288]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], ecx

; 254  : 	
; 255  : 	// if we've got anything stuffed away, use it now
; 256  : 	if (m_remainder)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	test	ecx, ecx
	je	$LN7@Update

; 257  : 	{
; 258  : 		uint8 prefix = sc_bufSize-m_remainder;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	mov	edx, 192				; 000000c0H
	sub	edx, ecx
	mov	BYTE PTR _prefix$1[ebp], dl

; 259  : 		memcpy(&(((uint8 *)m_data)[m_remainder]), message, prefix);

	movzx	eax, BYTE PTR _prefix$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+292]
	add	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 260  : 		u.p64 = m_data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _u$[ebp], eax

; 261  : 		Mix(u.p64, h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);

	lea	eax, DWORD PTR _h11$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h10$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h9$[ebp]
	push	edx
	lea	eax, DWORD PTR _h8$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h7$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h6$[ebp]
	push	edx
	lea	eax, DWORD PTR _h5$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h4$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h3$[ebp]
	push	edx
	lea	eax, DWORD PTR _h2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h0$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	?Mix@SpookyHash@@SAXPB_KAA_K11111111111@Z ; SpookyHash::Mix
	add	esp, 52					; 00000034H

; 262  : 		Mix(&u.p64[sc_numVars], h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);

	lea	eax, DWORD PTR _h11$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h10$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h9$[ebp]
	push	edx
	lea	eax, DWORD PTR _h8$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h7$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h6$[ebp]
	push	edx
	lea	eax, DWORD PTR _h5$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h4$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h3$[ebp]
	push	edx
	lea	eax, DWORD PTR _h2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h0$[ebp]
	push	edx
	mov	eax, 8
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	?Mix@SpookyHash@@SAXPB_KAA_K11111111111@Z ; SpookyHash::Mix
	add	esp, 52					; 00000034H

; 263  : 		u.p8 = ((const uint8 *)message) + prefix;

	movzx	eax, BYTE PTR _prefix$1[ebp]
	add	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR _u$[ebp], eax

; 264  : 		length -= prefix;

	movzx	eax, BYTE PTR _prefix$1[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _length$[ebp], ecx

; 265  : 	}

	jmp	SHORT $LN8@Update
$LN7@Update:

; 266  : 	else
; 267  : 	{
; 268  : 		u.p8 = (const uint8 *)message;

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR _u$[ebp], eax
$LN8@Update:

; 269  : 	}
; 270  : 	
; 271  : 	// handle all whole blocks of sc_blockSize bytes
; 272  : 	end = u.p64 + (length/sc_blockSize)*sc_numVars;

	mov	eax, DWORD PTR _length$[ebp]
	xor	edx, edx
	mov	ecx, 96					; 00000060H
	div	ecx
	imul	edx, eax, 12
	mov	eax, DWORD PTR _u$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _end$[ebp], ecx

; 273  : 	remainder = (uint8)(length-((const uint8 *)end-u.p8));

	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, eax
	mov	BYTE PTR _remainder$[ebp], cl
$LN2@Update:

; 274  : #if !ALLOW_UNALIGNED_READS
; 275  : 	if ((u.i & 0x7) == 0)
; 276  : #endif
; 277  : 	{
; 278  : 		while (u.p64 < end)

	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jae	SHORT $LN3@Update

; 279  : 		{ 
; 280  : 			Mix(u.p64, h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);

	lea	eax, DWORD PTR _h11$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h10$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h9$[ebp]
	push	edx
	lea	eax, DWORD PTR _h8$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h7$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h6$[ebp]
	push	edx
	lea	eax, DWORD PTR _h5$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h4$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h3$[ebp]
	push	edx
	lea	eax, DWORD PTR _h2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h0$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	?Mix@SpookyHash@@SAXPB_KAA_K11111111111@Z ; SpookyHash::Mix
	add	esp, 52					; 00000034H

; 281  : 			u.p64 += sc_numVars;

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 96					; 00000060H
	mov	DWORD PTR _u$[ebp], eax

; 282  : 		}

	jmp	SHORT $LN2@Update
$LN3@Update:

; 283  : 	}
; 284  : #if !ALLOW_UNALIGNED_READS
; 285  : 	else
; 286  : 	{
; 287  : 		while (u.p64 < end)
; 288  : 		{ 
; 289  : 			memcpy(m_data, u.p8, sc_blockSize);
; 290  : 			Mix(m_data, h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);
; 291  : 			u.p64 += sc_numVars;
; 292  : 		}
; 293  : 	}
; 294  : #endif
; 295  : 
; 296  : 	// stuff away the last few bytes
; 297  : 	m_remainder = remainder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _remainder$[ebp]
	mov	BYTE PTR [eax+292], cl

; 298  : 	memcpy(m_data, end, remainder);

	movzx	eax, BYTE PTR _remainder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 299  : 	
; 300  : 	// stuff away the variables
; 301  : 	m_state[0] = h0;

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h0$[ebp]
	mov	esi, DWORD PTR _h0$[ebp+4]
	mov	DWORD PTR [edx+ecx+192], eax
	mov	DWORD PTR [edx+ecx+196], esi

; 302  : 	m_state[1] = h1;

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _h1$[ebp]
	mov	esi, DWORD PTR _h1$[ebp+4]
	mov	DWORD PTR [ecx+eax+192], edx
	mov	DWORD PTR [ecx+eax+196], esi

; 303  : 	m_state[2] = h2;

	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _h2$[ebp]
	mov	esi, DWORD PTR _h2$[ebp+4]
	mov	DWORD PTR [ecx+eax+192], edx
	mov	DWORD PTR [ecx+eax+196], esi

; 304  : 	m_state[3] = h3;

	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h3$[ebp]
	mov	esi, DWORD PTR _h3$[ebp+4]
	mov	DWORD PTR [edx+ecx+192], eax
	mov	DWORD PTR [edx+ecx+196], esi

; 305  : 	m_state[4] = h4;

	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _h4$[ebp]
	mov	esi, DWORD PTR _h4$[ebp+4]
	mov	DWORD PTR [ecx+eax+192], edx
	mov	DWORD PTR [ecx+eax+196], esi

; 306  : 	m_state[5] = h5;

	mov	eax, 8
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h5$[ebp]
	mov	esi, DWORD PTR _h5$[ebp+4]
	mov	DWORD PTR [edx+ecx+192], eax
	mov	DWORD PTR [edx+ecx+196], esi

; 307  : 	m_state[6] = h6;

	mov	eax, 8
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h6$[ebp]
	mov	esi, DWORD PTR _h6$[ebp+4]
	mov	DWORD PTR [edx+ecx+192], eax
	mov	DWORD PTR [edx+ecx+196], esi

; 308  : 	m_state[7] = h7;

	mov	eax, 8
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h7$[ebp]
	mov	esi, DWORD PTR _h7$[ebp+4]
	mov	DWORD PTR [edx+ecx+192], eax
	mov	DWORD PTR [edx+ecx+196], esi

; 309  : 	m_state[8] = h8;

	mov	eax, 8
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _h8$[ebp]
	mov	esi, DWORD PTR _h8$[ebp+4]
	mov	DWORD PTR [ecx+eax+192], edx
	mov	DWORD PTR [ecx+eax+196], esi

; 310  : 	m_state[9] = h9;

	mov	eax, 8
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h9$[ebp]
	mov	esi, DWORD PTR _h9$[ebp+4]
	mov	DWORD PTR [edx+ecx+192], eax
	mov	DWORD PTR [edx+ecx+196], esi

; 311  : 	m_state[10] = h10;

	mov	eax, 8
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h10$[ebp]
	mov	esi, DWORD PTR _h10$[ebp+4]
	mov	DWORD PTR [edx+ecx+192], eax
	mov	DWORD PTR [edx+ecx+196], esi

; 312  : 	m_state[11] = h11;

	mov	eax, 8
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h11$[ebp]
	mov	esi, DWORD PTR _h11$[ebp+4]
	mov	DWORD PTR [edx+ecx+192], eax
	mov	DWORD PTR [edx+ecx+196], esi
$LN1@Update:

; 313  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@Update
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN24@Update:
	DD	13					; 0000000dH
	DD	$LN23@Update
$LN23@Update:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN10@Update
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN11@Update
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN12@Update
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN13@Update
	DD	-92					; ffffffa4H
	DD	8
	DD	$LN14@Update
	DD	-108					; ffffff94H
	DD	8
	DD	$LN15@Update
	DD	-124					; ffffff84H
	DD	8
	DD	$LN16@Update
	DD	-140					; ffffff74H
	DD	8
	DD	$LN17@Update
	DD	-156					; ffffff64H
	DD	8
	DD	$LN18@Update
	DD	-172					; ffffff54H
	DD	8
	DD	$LN19@Update
	DD	-188					; ffffff44H
	DD	8
	DD	$LN20@Update
	DD	-204					; ffffff34H
	DD	8
	DD	$LN21@Update
	DD	-240					; ffffff10H
	DD	4
	DD	$LN22@Update
$LN22@Update:
	DB	117					; 00000075H
	DB	0
$LN21@Update:
	DB	104					; 00000068H
	DB	49					; 00000031H
	DB	49					; 00000031H
	DB	0
$LN20@Update:
	DB	104					; 00000068H
	DB	49					; 00000031H
	DB	48					; 00000030H
	DB	0
$LN19@Update:
	DB	104					; 00000068H
	DB	57					; 00000039H
	DB	0
$LN18@Update:
	DB	104					; 00000068H
	DB	56					; 00000038H
	DB	0
$LN17@Update:
	DB	104					; 00000068H
	DB	55					; 00000037H
	DB	0
$LN16@Update:
	DB	104					; 00000068H
	DB	54					; 00000036H
	DB	0
$LN15@Update:
	DB	104					; 00000068H
	DB	53					; 00000035H
	DB	0
$LN14@Update:
	DB	104					; 00000068H
	DB	52					; 00000034H
	DB	0
$LN13@Update:
	DB	104					; 00000068H
	DB	51					; 00000033H
	DB	0
$LN12@Update:
	DB	104					; 00000068H
	DB	50					; 00000032H
	DB	0
$LN11@Update:
	DB	104					; 00000068H
	DB	49					; 00000031H
	DB	0
$LN10@Update:
	DB	104					; 00000068H
	DB	48					; 00000030H
	DB	0
?Update@SpookyHash@@QAEXPBXI@Z ENDP			; SpookyHash::Update
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.cpp
;	COMDAT ?Init@SpookyHash@@QAEX_K0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_seed1$ = 8						; size = 8
_seed2$ = 16						; size = 8
?Init@SpookyHash@@QAEX_K0@Z PROC			; SpookyHash::Init, COMDAT
; _this$ = ecx

; 200  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET __A2B2F00C_SpookyV2@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 201  : 	m_length = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+288], 0

; 202  : 	m_remainder = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+292], 0

; 203  : 	m_state[0] = seed1;

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _seed1$[ebp]
	mov	esi, DWORD PTR _seed1$[ebp+4]
	mov	DWORD PTR [edx+ecx+192], eax
	mov	DWORD PTR [edx+ecx+196], esi

; 204  : 	m_state[1] = seed2;

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _seed2$[ebp]
	mov	esi, DWORD PTR _seed2$[ebp+4]
	mov	DWORD PTR [ecx+eax+192], edx
	mov	DWORD PTR [ecx+eax+196], esi

; 205  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Init@SpookyHash@@QAEX_K0@Z ENDP			; SpookyHash::Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\HashFunction\SpookyV2.cpp
;	COMDAT ?Hash128@SpookyHash@@SAXPBXIPA_K1@Z
_TEXT	SEGMENT
_remainder$ = -332					; size = 4
_u$ = -320						; size = 4
_end$ = -308						; size = 4
_buf$ = -296						; size = 96
_h11$ = -192						; size = 8
_h10$ = -176						; size = 8
_h9$ = -160						; size = 8
_h8$ = -144						; size = 8
_h7$ = -128						; size = 8
_h6$ = -112						; size = 8
_h5$ = -96						; size = 8
_h4$ = -80						; size = 8
_h3$ = -64						; size = 8
_h2$ = -48						; size = 8
_h1$ = -32						; size = 8
_h0$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_message$ = 8						; size = 4
_length$ = 12						; size = 4
_hash1$ = 16						; size = 4
_hash2$ = 20						; size = 4
?Hash128@SpookyHash@@SAXPBXIPA_K1@Z PROC		; SpookyHash::Hash128, COMDAT

; 136  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __A2B2F00C_SpookyV2@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 137  : 	if (length < sc_bufSize)

	cmp	DWORD PTR _length$[ebp], 192		; 000000c0H
	jae	SHORT $LN4@Hash128

; 138  : 	{
; 139  : 		Short(message, length, hash1, hash2);

	mov	eax, DWORD PTR _hash2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hash1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	call	?Short@SpookyHash@@CAXPBXIPA_K1@Z	; SpookyHash::Short
	add	esp, 16					; 00000010H

; 140  : 		return;

	jmp	$LN1@Hash128
$LN4@Hash128:

; 141  : 	}
; 142  : 
; 143  : 	uint64 h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11;
; 144  : 	uint64 buf[sc_numVars];
; 145  : 	uint64 *end;
; 146  : 	union 
; 147  : 	{ 
; 148  : 		const uint8 *p8; 
; 149  : 		uint64 *p64; 
; 150  : 		size_t i; 
; 151  : 	} u;
; 152  : 	size_t remainder;
; 153  : 	
; 154  : 	h0=h3=h6=h9	 = *hash1;

	mov	eax, DWORD PTR _hash1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _h9$[ebp], ecx
	mov	DWORD PTR _h9$[ebp+4], edx
	mov	eax, DWORD PTR _h9$[ebp]
	mov	ecx, DWORD PTR _h9$[ebp+4]
	mov	DWORD PTR _h6$[ebp], eax
	mov	DWORD PTR _h6$[ebp+4], ecx
	mov	edx, DWORD PTR _h6$[ebp]
	mov	eax, DWORD PTR _h6$[ebp+4]
	mov	DWORD PTR _h3$[ebp], edx
	mov	DWORD PTR _h3$[ebp+4], eax
	mov	ecx, DWORD PTR _h3$[ebp]
	mov	edx, DWORD PTR _h3$[ebp+4]
	mov	DWORD PTR _h0$[ebp], ecx
	mov	DWORD PTR _h0$[ebp+4], edx

; 155  : 	h1=h4=h7=h10 = *hash2;

	mov	eax, DWORD PTR _hash2$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _h10$[ebp], ecx
	mov	DWORD PTR _h10$[ebp+4], edx
	mov	eax, DWORD PTR _h10$[ebp]
	mov	ecx, DWORD PTR _h10$[ebp+4]
	mov	DWORD PTR _h7$[ebp], eax
	mov	DWORD PTR _h7$[ebp+4], ecx
	mov	edx, DWORD PTR _h7$[ebp]
	mov	eax, DWORD PTR _h7$[ebp+4]
	mov	DWORD PTR _h4$[ebp], edx
	mov	DWORD PTR _h4$[ebp+4], eax
	mov	ecx, DWORD PTR _h4$[ebp]
	mov	edx, DWORD PTR _h4$[ebp+4]
	mov	DWORD PTR _h1$[ebp], ecx
	mov	DWORD PTR _h1$[ebp+4], edx

; 156  : 	h2=h5=h8=h11 = sc_const;

	mov	eax, -559038737				; deadbeefH
	mov	DWORD PTR _h11$[ebp], -559038737	; deadbeefH
	mov	DWORD PTR _h11$[ebp+4], eax
	mov	ecx, DWORD PTR _h11$[ebp]
	mov	edx, DWORD PTR _h11$[ebp+4]
	mov	DWORD PTR _h8$[ebp], ecx
	mov	DWORD PTR _h8$[ebp+4], edx
	mov	eax, DWORD PTR _h8$[ebp]
	mov	ecx, DWORD PTR _h8$[ebp+4]
	mov	DWORD PTR _h5$[ebp], eax
	mov	DWORD PTR _h5$[ebp+4], ecx
	mov	edx, DWORD PTR _h5$[ebp]
	mov	eax, DWORD PTR _h5$[ebp+4]
	mov	DWORD PTR _h2$[ebp], edx
	mov	DWORD PTR _h2$[ebp+4], eax

; 157  : 	
; 158  : 	u.p8 = (const uint8 *)message;

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR _u$[ebp], eax

; 159  : 	end = u.p64 + (length/sc_blockSize)*sc_numVars;

	mov	eax, DWORD PTR _length$[ebp]
	xor	edx, edx
	mov	ecx, 96					; 00000060H
	div	ecx
	imul	edx, eax, 12
	mov	eax, DWORD PTR _u$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _end$[ebp], ecx
$LN2@Hash128:

; 160  : 
; 161  : 	// handle all whole sc_blockSize blocks of bytes
; 162  : #if !ALLOW_UNALIGNED_READS
; 163  : 	if ((u.i & 0x7) == 0)
; 164  : #endif
; 165  : 	{
; 166  : 		while (u.p64 < end)

	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jae	SHORT $LN3@Hash128

; 167  : 		{ 
; 168  : 			Mix(u.p64, h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);

	lea	eax, DWORD PTR _h11$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h10$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h9$[ebp]
	push	edx
	lea	eax, DWORD PTR _h8$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h7$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h6$[ebp]
	push	edx
	lea	eax, DWORD PTR _h5$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h4$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h3$[ebp]
	push	edx
	lea	eax, DWORD PTR _h2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h0$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	?Mix@SpookyHash@@SAXPB_KAA_K11111111111@Z ; SpookyHash::Mix
	add	esp, 52					; 00000034H

; 169  : 			u.p64 += sc_numVars;

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 96					; 00000060H
	mov	DWORD PTR _u$[ebp], eax

; 170  : 		}

	jmp	SHORT $LN2@Hash128
$LN3@Hash128:

; 171  : 	}
; 172  : #if !ALLOW_UNALIGNED_READS
; 173  : 	else
; 174  : 	{
; 175  : 		while (u.p64 < end)
; 176  : 		{
; 177  : 			memcpy(buf, u.p64, sc_blockSize);
; 178  : 			Mix(buf, h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);
; 179  : 		u.p64 += sc_numVars;
; 180  : 		}
; 181  : 	}
; 182  : #endif
; 183  : 
; 184  : 	// handle the last partial block of sc_blockSize bytes
; 185  : 	remainder = (length - ((const uint8 *)end-(const uint8 *)message));

	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, DWORD PTR _message$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _remainder$[ebp], ecx

; 186  : 	memcpy(buf, end, remainder);

	mov	eax, DWORD PTR _remainder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 187  : 	memset(((uint8 *)buf)+remainder, 0, sc_blockSize-remainder);

	mov	eax, 96					; 00000060H
	sub	eax, DWORD PTR _remainder$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _remainder$[ebp]
	lea	edx, DWORD PTR _buf$[ebp+ecx]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 188  : 	((uint8 *)buf)[sc_blockSize-1] = uint8(remainder);

	mov	eax, 1
	imul	ecx, eax, 95
	mov	dl, BYTE PTR _remainder$[ebp]
	mov	BYTE PTR _buf$[ebp+ecx], dl

; 189  : 	
; 190  : 	// do some final mixing 
; 191  : 	End(buf, h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);

	lea	eax, DWORD PTR _h11$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h10$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h9$[ebp]
	push	edx
	lea	eax, DWORD PTR _h8$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h7$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h6$[ebp]
	push	edx
	lea	eax, DWORD PTR _h5$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h4$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h3$[ebp]
	push	edx
	lea	eax, DWORD PTR _h2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _h0$[ebp]
	push	edx
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	?End@SpookyHash@@SAXPB_KAA_K11111111111@Z ; SpookyHash::End
	add	esp, 52					; 00000034H

; 192  : 	*hash1 = h0;

	mov	eax, DWORD PTR _hash1$[ebp]
	mov	ecx, DWORD PTR _h0$[ebp]
	mov	edx, DWORD PTR _h0$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 193  : 	*hash2 = h1;

	mov	eax, DWORD PTR _hash2$[ebp]
	mov	ecx, DWORD PTR _h1$[ebp]
	mov	edx, DWORD PTR _h1$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN1@Hash128:

; 194  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Hash128
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@Hash128:
	DD	14					; 0000000eH
	DD	$LN20@Hash128
$LN20@Hash128:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN6@Hash128
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN7@Hash128
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN8@Hash128
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN9@Hash128
	DD	-80					; ffffffb0H
	DD	8
	DD	$LN10@Hash128
	DD	-96					; ffffffa0H
	DD	8
	DD	$LN11@Hash128
	DD	-112					; ffffff90H
	DD	8
	DD	$LN12@Hash128
	DD	-128					; ffffff80H
	DD	8
	DD	$LN13@Hash128
	DD	-144					; ffffff70H
	DD	8
	DD	$LN14@Hash128
	DD	-160					; ffffff60H
	DD	8
	DD	$LN15@Hash128
	DD	-176					; ffffff50H
	DD	8
	DD	$LN16@Hash128
	DD	-192					; ffffff40H
	DD	8
	DD	$LN17@Hash128
	DD	-296					; fffffed8H
	DD	96					; 00000060H
	DD	$LN18@Hash128
	DD	-320					; fffffec0H
	DD	4
	DD	$LN19@Hash128
$LN19@Hash128:
	DB	117					; 00000075H
	DB	0
$LN18@Hash128:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN17@Hash128:
	DB	104					; 00000068H
	DB	49					; 00000031H
	DB	49					; 00000031H
	DB	0
$LN16@Hash128:
	DB	104					; 00000068H
	DB	49					; 00000031H
	DB	48					; 00000030H
	DB	0
$LN15@Hash128:
	DB	104					; 00000068H
	DB	57					; 00000039H
	DB	0
$LN14@Hash128:
	DB	104					; 00000068H
	DB	56					; 00000038H
	DB	0
$LN13@Hash128:
	DB	104					; 00000068H
	DB	55					; 00000037H
	DB	0
$LN12@Hash128:
	DB	104					; 00000068H
	DB	54					; 00000036H
	DB	0
$LN11@Hash128:
	DB	104					; 00000068H
	DB	53					; 00000035H
	DB	0
$LN10@Hash128:
	DB	104					; 00000068H
	DB	52					; 00000034H
	DB	0
$LN9@Hash128:
	DB	104					; 00000068H
	DB	51					; 00000033H
	DB	0
$LN8@Hash128:
	DB	104					; 00000068H
	DB	50					; 00000032H
	DB	0
$LN7@Hash128:
	DB	104					; 00000068H
	DB	49					; 00000031H
	DB	0
$LN6@Hash128:
	DB	104					; 00000068H
	DB	48					; 00000030H
	DB	0
?Hash128@SpookyHash@@SAXPBXIPA_K1@Z ENDP		; SpookyHash::Hash128
_TEXT	ENDS
END
