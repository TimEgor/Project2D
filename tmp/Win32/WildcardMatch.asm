; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\WildcardMatch\WildcardMatch.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__D84F1150_WildcardMatch@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?WildcardMatch@@YA_NPBD0@Z			; WildcardMatch
PUBLIC	__JustMyCode_Default
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\tim23\Documents\Visual Studio 2019\Projects\Project2D\Project2D\Utilities\WildcardMatch\WildcardMatch.cpp
;	COMDAT ?WildcardMatch@@YA_NPBD0@Z
_TEXT	SEGMENT
_star$ = -20						; size = 4
_i$ = -8						; size = 4
_pat$ = 8						; size = 4
_str$ = 12						; size = 4
?WildcardMatch@@YA_NPBD0@Z PROC				; WildcardMatch, COMDAT

; 4    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D84F1150_WildcardMatch@cpp
	call	@__CheckForDebuggerJustMyCode@4
$new_segment$19:

; 5    : 	int i, star;
; 6    : 
; 7    : new_segment:
; 8    : 
; 9    : 	star = 0;

	mov	DWORD PTR _star$[ebp], 0

; 10   : 	if (*pat == '*')

	mov	eax, DWORD PTR _pat$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $test_match$20

; 11   : 	{
; 12   : 		star = 1;

	mov	DWORD PTR _star$[ebp], 1
$LN4@WildcardMa:

; 13   : 
; 14   : 		do { pat++; } while (*pat == '*'); /* enddo */

	mov	eax, DWORD PTR _pat$[ebp]
	add	eax, 1
	mov	DWORD PTR _pat$[ebp], eax
	mov	eax, DWORD PTR _pat$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	je	SHORT $LN4@WildcardMa
$test_match$20:

; 15   : 	} /* endif */
; 16   : 
; 17   : test_match:
; 18   : 
; 19   : 	for (i = 0; pat[i] && (pat[i] != '*'); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@WildcardMa
$LN5@WildcardMa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@WildcardMa:
	mov	eax, DWORD PTR _pat$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@WildcardMa
	mov	eax, DWORD PTR _pat$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	je	SHORT $LN6@WildcardMa

; 20   : 	{
; 21   : 		//if (mapCaseTable[str[i]] != mapCaseTable[pat[i]]) {
; 22   : 		if (str[i] != pat[i])

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pat$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN9@WildcardMa

; 23   : 		{
; 24   : 			if (!str[i])

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN10@WildcardMa

; 25   : 				return 0;

	xor	al, al
	jmp	$LN1@WildcardMa
$LN10@WildcardMa:

; 26   : 			if ((pat[i] == '?') && (str[i] != '.'))

	mov	eax, DWORD PTR _pat$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 63					; 0000003fH
	jne	SHORT $LN11@WildcardMa
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	je	SHORT $LN11@WildcardMa

; 27   : 				continue;

	jmp	SHORT $LN5@WildcardMa
$LN11@WildcardMa:

; 28   : 			if (!star)

	cmp	DWORD PTR _star$[ebp], 0
	jne	SHORT $LN12@WildcardMa

; 29   : 				return 0;

	xor	al, al
	jmp	SHORT $LN1@WildcardMa
$LN12@WildcardMa:

; 30   : 
; 31   : 			str++;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 1
	mov	DWORD PTR _str$[ebp], eax

; 32   : 			goto test_match;

	jmp	$test_match$20
$LN9@WildcardMa:

; 33   : 		}
; 34   : 	}

	jmp	$LN5@WildcardMa
$LN6@WildcardMa:

; 35   : 
; 36   : 	if (pat[i] == '*')

	mov	eax, DWORD PTR _pat$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $LN13@WildcardMa

; 37   : 	{
; 38   : 		str += i;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _str$[ebp], eax

; 39   : 		pat += i;

	mov	eax, DWORD PTR _pat$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _pat$[ebp], eax

; 40   : 
; 41   : 		goto new_segment;

	jmp	$new_segment$19
$LN13@WildcardMa:

; 42   : 	}
; 43   : 
; 44   : 	if (!str[i])

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN14@WildcardMa

; 45   : 		return 1;

	mov	al, 1
	jmp	SHORT $LN1@WildcardMa
$LN14@WildcardMa:

; 46   : 	if (i && pat[i - 1] == '*')

	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN15@WildcardMa
	mov	eax, DWORD PTR _pat$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $LN15@WildcardMa

; 47   : 		return 1;

	mov	al, 1
	jmp	SHORT $LN1@WildcardMa
$LN15@WildcardMa:

; 48   : 	if (!star)

	cmp	DWORD PTR _star$[ebp], 0
	jne	SHORT $LN16@WildcardMa

; 49   : 		return 0;

	xor	al, al
	jmp	SHORT $LN1@WildcardMa
$LN16@WildcardMa:

; 50   : 
; 51   : 	str++;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 1
	mov	DWORD PTR _str$[ebp], eax

; 52   : 	goto test_match;

	jmp	$test_match$20
$LN1@WildcardMa:

; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WildcardMatch@@YA_NPBD0@Z ENDP				; WildcardMatch
_TEXT	ENDS
END
